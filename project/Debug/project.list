
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08002c40  08002c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e54  08002e54  00027d2c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e54  08002e54  00027d2c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e54  08002e54  00027d2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007d2c  20000000  08002e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20007d2c  0800ab88  00027d2c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007f64  0800ab88  00027f64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027d2c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00027d5c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006eae  00000000  00000000  00027d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e2a  00000000  00000000  0002ec4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  00030a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004eb  00000000  00000000  00031170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e0f  00000000  00000000  0003165b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009b7f  00000000  00000000  0005846a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5a1b  00000000  00000000  00061fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d58  00000000  00000000  00157a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0015975c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20007d2c 	.word	0x20007d2c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002c28 	.word	0x08002c28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007d30 	.word	0x20007d30
 80001cc:	08002c28 	.word	0x08002c28

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <USART2_IRQHandler>:

#include "UART.h"
#include "printf.h"
#include "systick.h"

void USART2_IRQHandler() {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
    uint8_t ch = USART_Read_Nonblocking(USART2);
 80002a6:	4806      	ldr	r0, [pc, #24]	; (80002c0 <USART2_IRQHandler+0x20>)
 80002a8:	f000 fe1c 	bl	8000ee4 <USART_Read_Nonblocking>
 80002ac:	4603      	mov	r3, r0
 80002ae:	71fb      	strb	r3, [r7, #7]
    printf("%c", ch);
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 f902 	bl	80014bc <putchar>
}
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40004400 	.word	0x40004400

080002c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	db12      	blt.n	80002fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	f003 021f 	and.w	r2, r3, #31
 80002dc:	490a      	ldr	r1, [pc, #40]	; (8000308 <__NVIC_DisableIRQ+0x44>)
 80002de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e2:	095b      	lsrs	r3, r3, #5
 80002e4:	2001      	movs	r0, #1
 80002e6:	fa00 f202 	lsl.w	r2, r0, r2
 80002ea:	3320      	adds	r3, #32
 80002ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002f0:	f3bf 8f4f 	dsb	sy
}
 80002f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80002f6:	f3bf 8f6f 	isb	sy
}
 80002fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100

0800030c <extractMetadataFromMIDI>:


volatile int localModeEnabled = 0;
static int playPauseState = 0; // 0 represents pause, 1 represents play

void extractMetadataFromMIDI(const unsigned char *midiData, size_t midiSize) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b0ba      	sub	sp, #232	; 0xe8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
	char songTitle[100] = "";
 8000316:	2300      	movs	r3, #0
 8000318:	66fb      	str	r3, [r7, #108]	; 0x6c
 800031a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800031e:	2260      	movs	r2, #96	; 0x60
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f001 ffe8 	bl	80022f8 <memset>
	char copyright[100] = "";
 8000328:	2300      	movs	r3, #0
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	f107 030c 	add.w	r3, r7, #12
 8000330:	2260      	movs	r2, #96	; 0x60
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f001 ffdf 	bl	80022f8 <memset>
	uint32_t tempo = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	int foundTitle = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	int foundCopyright = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	int foundTempo = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	for (size_t i = 0; i < midiSize - 6; i++) {
 8000352:	2300      	movs	r3, #0
 8000354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000358:	e0a5      	b.n	80004a6 <extractMetadataFromMIDI+0x19a>
		if (midiData[i] == 0x4D && midiData[i + 1] == 0x54 && midiData[i + 2] == 0x72 && midiData[i + 3] == 0x6B) {
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000360:	4413      	add	r3, r2
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b4d      	cmp	r3, #77	; 0x4d
 8000366:	f040 8099 	bne.w	800049c <extractMetadataFromMIDI+0x190>
 800036a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800036e:	3301      	adds	r3, #1
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4413      	add	r3, r2
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b54      	cmp	r3, #84	; 0x54
 8000378:	f040 8090 	bne.w	800049c <extractMetadataFromMIDI+0x190>
 800037c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000380:	3302      	adds	r3, #2
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	4413      	add	r3, r2
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b72      	cmp	r3, #114	; 0x72
 800038a:	f040 8087 	bne.w	800049c <extractMetadataFromMIDI+0x190>
 800038e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000392:	3303      	adds	r3, #3
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	4413      	add	r3, r2
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b6b      	cmp	r3, #107	; 0x6b
 800039c:	d17e      	bne.n	800049c <extractMetadataFromMIDI+0x190>
			// This is the track chunk, and metadata should be present

			// Search for relevant events
			while (i < midiSize - 6) {
 800039e:	e077      	b.n	8000490 <extractMetadataFromMIDI+0x184>
				// Look for metadata events
				if (midiData[i] == 0xFF) {
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80003a6:	4413      	add	r3, r2
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2bff      	cmp	r3, #255	; 0xff
 80003ac:	d16b      	bne.n	8000486 <extractMetadataFromMIDI+0x17a>
					uint8_t eventType = midiData[i + 1];
 80003ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80003b2:	3301      	adds	r3, #1
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	4413      	add	r3, r2
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
					uint8_t eventLength = midiData[i + 2];
 80003be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80003c2:	3302      	adds	r3, #2
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	4413      	add	r3, r2
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

					if (eventType == 0x03 && !foundTitle) {
 80003ce:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80003d2:	2b03      	cmp	r3, #3
 80003d4:	d11a      	bne.n	800040c <extractMetadataFromMIDI+0x100>
 80003d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d116      	bne.n	800040c <extractMetadataFromMIDI+0x100>
						// Track Name Event (Song Title)
						strncpy(songTitle, (char *)(midiData + i + 3), eventLength);
 80003de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80003e2:	3303      	adds	r3, #3
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	18d1      	adds	r1, r2, r3
 80003e8:	f897 20d2 	ldrb.w	r2, [r7, #210]	; 0xd2
 80003ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003f0:	4618      	mov	r0, r3
 80003f2:	f001 ff89 	bl	8002308 <strncpy>
						songTitle[eventLength] = '\0';
 80003f6:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80003fa:	33e8      	adds	r3, #232	; 0xe8
 80003fc:	443b      	add	r3, r7
 80003fe:	2200      	movs	r2, #0
 8000400:	f803 2c7c 	strb.w	r2, [r3, #-124]
						foundTitle = 1;
 8000404:	2301      	movs	r3, #1
 8000406:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800040a:	e033      	b.n	8000474 <extractMetadataFromMIDI+0x168>
					} else if (eventType == 0x02 && !foundCopyright) {
 800040c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000410:	2b02      	cmp	r3, #2
 8000412:	d11a      	bne.n	800044a <extractMetadataFromMIDI+0x13e>
 8000414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000418:	2b00      	cmp	r3, #0
 800041a:	d116      	bne.n	800044a <extractMetadataFromMIDI+0x13e>
						// Copyright Notice Event
						strncpy(copyright, (char *)(midiData + i + 3), eventLength);
 800041c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000420:	3303      	adds	r3, #3
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	18d1      	adds	r1, r2, r3
 8000426:	f897 20d2 	ldrb.w	r2, [r7, #210]	; 0xd2
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	4618      	mov	r0, r3
 8000430:	f001 ff6a 	bl	8002308 <strncpy>
						copyright[eventLength] = '\0';
 8000434:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8000438:	33e8      	adds	r3, #232	; 0xe8
 800043a:	443b      	add	r3, r7
 800043c:	2200      	movs	r2, #0
 800043e:	f803 2ce0 	strb.w	r2, [r3, #-224]
						foundCopyright = 1;
 8000442:	2301      	movs	r3, #1
 8000444:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000448:	e014      	b.n	8000474 <extractMetadataFromMIDI+0x168>
					} else if (eventType == 0x51 && !foundTempo) {
 800044a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800044e:	2b51      	cmp	r3, #81	; 0x51
 8000450:	d110      	bne.n	8000474 <extractMetadataFromMIDI+0x168>
 8000452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000456:	2b00      	cmp	r3, #0
 8000458:	d10c      	bne.n	8000474 <extractMetadataFromMIDI+0x168>
						// Tempo Event
						tempo = convert_to_uint32((uint8_t *)(midiData + i + 3));
 800045a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800045e:	3303      	adds	r3, #3
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	4413      	add	r3, r2
 8000464:	4618      	mov	r0, r3
 8000466:	f001 f950 	bl	800170a <convert_to_uint32>
 800046a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
						foundTempo = 1;
 800046e:	2301      	movs	r3, #1
 8000470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
					}
					// Move the index past this event
					i += (3 + eventLength);
 8000474:	f897 20d2 	ldrb.w	r2, [r7, #210]	; 0xd2
 8000478:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800047c:	4413      	add	r3, r2
 800047e:	3303      	adds	r3, #3
 8000480:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000484:	e004      	b.n	8000490 <extractMetadataFromMIDI+0x184>
				} else {
					// Skip non-metadata events
					i++;
 8000486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800048a:	3301      	adds	r3, #1
 800048c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			while (i < midiSize - 6) {
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	3b06      	subs	r3, #6
 8000494:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000498:	429a      	cmp	r2, r3
 800049a:	d381      	bcc.n	80003a0 <extractMetadataFromMIDI+0x94>
	for (size_t i = 0; i < midiSize - 6; i++) {
 800049c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80004a0:	3301      	adds	r3, #1
 80004a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	3b06      	subs	r3, #6
 80004aa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80004ae:	429a      	cmp	r2, r3
 80004b0:	f4ff af53 	bcc.w	800035a <extractMetadataFromMIDI+0x4e>
				}
			}
		}
	}
	// Display the extracted information
	printf("Title: %s\r\n", songTitle);
 80004b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004b8:	4619      	mov	r1, r3
 80004ba:	4809      	ldr	r0, [pc, #36]	; (80004e0 <extractMetadataFromMIDI+0x1d4>)
 80004bc:	f001 f80c 	bl	80014d8 <printf>
	printf("Copyright: %s\r\n", copyright);
 80004c0:	f107 0308 	add.w	r3, r7, #8
 80004c4:	4619      	mov	r1, r3
 80004c6:	4807      	ldr	r0, [pc, #28]	; (80004e4 <extractMetadataFromMIDI+0x1d8>)
 80004c8:	f001 f806 	bl	80014d8 <printf>
	printf("Tempo: %lu\r\n", tempo);
 80004cc:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80004d0:	4805      	ldr	r0, [pc, #20]	; (80004e8 <extractMetadataFromMIDI+0x1dc>)
 80004d2:	f001 f801 	bl	80014d8 <printf>
}
 80004d6:	bf00      	nop
 80004d8:	37e8      	adds	r7, #232	; 0xe8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	08002c40 	.word	0x08002c40
 80004e4:	08002c4c 	.word	0x08002c4c
 80004e8:	08002c5c 	.word	0x08002c5c

080004ec <displaySongInfo>:

void displaySongInfo(song currentSong) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	463b      	mov	r3, r7
 80004f4:	e883 0003 	stmia.w	r3, {r0, r1}
	// Extract song data (song.p_song) and size (song.size) from the 'currentSong' structure.
	unsigned char *songData = currentSong.p_song;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	60fb      	str	r3, [r7, #12]
	size_t songSize = currentSong.size;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	60bb      	str	r3, [r7, #8]

	// Display the extracted metadata
	extractMetadataFromMIDI(songData, songSize);
 8000500:	68b9      	ldr	r1, [r7, #8]
 8000502:	68f8      	ldr	r0, [r7, #12]
 8000504:	f7ff ff02 	bl	800030c <extractMetadataFromMIDI>
}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <printHelp>:

void printHelp(){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	printf("***REMOTE LED CONTROL MENU***\r\n");
 8000514:	4809      	ldr	r0, [pc, #36]	; (800053c <printHelp+0x2c>)
 8000516:	f000 ffb9 	bl	800148c <puts>
	printf("Available User Commands\r\n");
 800051a:	4809      	ldr	r0, [pc, #36]	; (8000540 <printHelp+0x30>)
 800051c:	f000 ffb6 	bl	800148c <puts>
	printf("NEXT - Show next song info\r\n");
 8000520:	4808      	ldr	r0, [pc, #32]	; (8000544 <printHelp+0x34>)
 8000522:	f000 ffb3 	bl	800148c <puts>
	printf("PLAY - Play the song (LED on)\r\n");
 8000526:	4808      	ldr	r0, [pc, #32]	; (8000548 <printHelp+0x38>)
 8000528:	f000 ffb0 	bl	800148c <puts>
	printf("PAUSE - Pause the song (LED Flash)\r\n");
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <printHelp+0x3c>)
 800052e:	f000 ffad 	bl	800148c <puts>
	printf("STOP - Stop the song (LED off)\r\n");
 8000532:	4807      	ldr	r0, [pc, #28]	; (8000550 <printHelp+0x40>)
 8000534:	f000 ffaa 	bl	800148c <puts>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	08002c6c 	.word	0x08002c6c
 8000540:	08002c8c 	.word	0x08002c8c
 8000544:	08002ca8 	.word	0x08002ca8
 8000548:	08002cc4 	.word	0x08002cc4
 800054c:	08002ce4 	.word	0x08002ce4
 8000550:	08002d08 	.word	0x08002d08

08000554 <toggleCommand>:

void toggleCommand(char* command) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	if (strcmp(command, "PLAY") == 0) {
 800055c:	4942      	ldr	r1, [pc, #264]	; (8000668 <toggleCommand+0x114>)
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff fe36 	bl	80001d0 <strcmp>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d110      	bne.n	800058c <toggleCommand+0x38>
		// Turn on the LED
		LED_On(EXTERN_LED);
 800056a:	2005      	movs	r0, #5
 800056c:	f000 fb5e 	bl	8000c2c <LED_On>
		flashEnabled = 0;
 8000570:	4b3e      	ldr	r3, [pc, #248]	; (800066c <toggleCommand+0x118>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
		DAC_Set_Value(4000);
 8000576:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800057a:	f000 fd9f 	bl	80010bc <DAC_Set_Value>
		delay_systick_ms(200);
 800057e:	20c8      	movs	r0, #200	; 0xc8
 8000580:	f001 f8ac 	bl	80016dc <delay_systick_ms>
		DAC_Set_Value(0);
 8000584:	2000      	movs	r0, #0
 8000586:	f000 fd99 	bl	80010bc <DAC_Set_Value>
		DAC_Set_Value(0);
	} else {
		printf("Invalid command\r\n");
		flashEnabled = 0;
	}
}
 800058a:	e069      	b.n	8000660 <toggleCommand+0x10c>
	} else if (strcmp(command, "STOP") == 0) {
 800058c:	4938      	ldr	r1, [pc, #224]	; (8000670 <toggleCommand+0x11c>)
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f7ff fe1e 	bl	80001d0 <strcmp>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d110      	bne.n	80005bc <toggleCommand+0x68>
		LED_Off(EXTERN_LED);
 800059a:	2005      	movs	r0, #5
 800059c:	f000 fb5c 	bl	8000c58 <LED_Off>
		flashEnabled = 0;
 80005a0:	4b32      	ldr	r3, [pc, #200]	; (800066c <toggleCommand+0x118>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
		DAC_Set_Value(4000);
 80005a6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80005aa:	f000 fd87 	bl	80010bc <DAC_Set_Value>
		delay_systick_ms(200);
 80005ae:	20c8      	movs	r0, #200	; 0xc8
 80005b0:	f001 f894 	bl	80016dc <delay_systick_ms>
		DAC_Set_Value(0);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fd81 	bl	80010bc <DAC_Set_Value>
}
 80005ba:	e051      	b.n	8000660 <toggleCommand+0x10c>
	} else if (strcmp(command, "HELP") == 0) {
 80005bc:	492d      	ldr	r1, [pc, #180]	; (8000674 <toggleCommand+0x120>)
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f7ff fe06 	bl	80001d0 <strcmp>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d102      	bne.n	80005d0 <toggleCommand+0x7c>
		printHelp();
 80005ca:	f7ff ffa1 	bl	8000510 <printHelp>
}
 80005ce:	e047      	b.n	8000660 <toggleCommand+0x10c>
	} else if (strcmp(command, "PAUSE") == 0) {
 80005d0:	4929      	ldr	r1, [pc, #164]	; (8000678 <toggleCommand+0x124>)
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f7ff fdfc 	bl	80001d0 <strcmp>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d10d      	bne.n	80005fa <toggleCommand+0xa6>
		flashEnabled = 1;
 80005de:	4b23      	ldr	r3, [pc, #140]	; (800066c <toggleCommand+0x118>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	601a      	str	r2, [r3, #0]
		DAC_Set_Value(4000);
 80005e4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80005e8:	f000 fd68 	bl	80010bc <DAC_Set_Value>
		delay_systick_ms(200);
 80005ec:	20c8      	movs	r0, #200	; 0xc8
 80005ee:	f001 f875 	bl	80016dc <delay_systick_ms>
		DAC_Set_Value(0);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 fd62 	bl	80010bc <DAC_Set_Value>
}
 80005f8:	e032      	b.n	8000660 <toggleCommand+0x10c>
	} else if (strcmp(command, "NEXT") == 0) {
 80005fa:	4920      	ldr	r1, [pc, #128]	; (800067c <toggleCommand+0x128>)
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff fde7 	bl	80001d0 <strcmp>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d125      	bne.n	8000654 <toggleCommand+0x100>
		if (currentSongIndex >= NUM_SONGS) {
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <toggleCommand+0x12c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b04      	cmp	r3, #4
 800060e:	d902      	bls.n	8000616 <toggleCommand+0xc2>
			currentSongIndex = 0;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <toggleCommand+0x12c>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
		song currentSong = get_song(currentSongIndex);
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <toggleCommand+0x12c>)
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	4611      	mov	r1, r2
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fd6d 	bl	8001100 <get_song>
		displaySongInfo(currentSong);
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800062e:	f7ff ff5d 	bl	80004ec <displaySongInfo>
		currentSongIndex++;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <toggleCommand+0x12c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <toggleCommand+0x12c>)
 800063c:	701a      	strb	r2, [r3, #0]
		DAC_Set_Value(4000);
 800063e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000642:	f000 fd3b 	bl	80010bc <DAC_Set_Value>
		delay_systick_ms(200);
 8000646:	20c8      	movs	r0, #200	; 0xc8
 8000648:	f001 f848 	bl	80016dc <delay_systick_ms>
		DAC_Set_Value(0);
 800064c:	2000      	movs	r0, #0
 800064e:	f000 fd35 	bl	80010bc <DAC_Set_Value>
}
 8000652:	e005      	b.n	8000660 <toggleCommand+0x10c>
		printf("Invalid command\r\n");
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <toggleCommand+0x130>)
 8000656:	f000 ff19 	bl	800148c <puts>
		flashEnabled = 0;
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <toggleCommand+0x118>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	08002d28 	.word	0x08002d28
 800066c:	20007d80 	.word	0x20007d80
 8000670:	08002d30 	.word	0x08002d30
 8000674:	08002d38 	.word	0x08002d38
 8000678:	08002d40 	.word	0x08002d40
 800067c:	08002d48 	.word	0x08002d48
 8000680:	20007d48 	.word	0x20007d48
 8000684:	08002d50 	.word	0x08002d50

08000688 <handleBackspace>:

void handleBackspace(char* input, int* length) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	if (*length > 0) {
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	dd0e      	ble.n	80006b8 <handleBackspace+0x30>
		(*length)--;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1e5a      	subs	r2, r3, #1
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	601a      	str	r2, [r3, #0]
		input[*length] = '\0';
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
		// Send backspace and space characters to erase the last character
		printf("\b \b");
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <handleBackspace+0x38>)
 80006b4:	f000 ff10 	bl	80014d8 <printf>
	}
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08002d64 	.word	0x08002d64

080006c4 <echoWords>:

void echoWords(char* command, int maxLength) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
	int index = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
	int count = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]

	while (!localModeEnabled) {
 80006d6:	e04c      	b.n	8000772 <echoWords+0xae>
		char c = USART_Read_Nonblocking(USART2);
 80006d8:	482b      	ldr	r0, [pc, #172]	; (8000788 <echoWords+0xc4>)
 80006da:	f000 fc03 	bl	8000ee4 <USART_Read_Nonblocking>
 80006de:	4603      	mov	r3, r0
 80006e0:	74fb      	strb	r3, [r7, #19]

		if (c != 0) {
 80006e2:	7cfb      	ldrb	r3, [r7, #19]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d02e      	beq.n	8000746 <echoWords+0x82>
			if (c == '\n' || c == '\r') {
 80006e8:	7cfb      	ldrb	r3, [r7, #19]
 80006ea:	2b0a      	cmp	r3, #10
 80006ec:	d002      	beq.n	80006f4 <echoWords+0x30>
 80006ee:	7cfb      	ldrb	r3, [r7, #19]
 80006f0:	2b0d      	cmp	r3, #13
 80006f2:	d106      	bne.n	8000702 <echoWords+0x3e>
				command[index] = '\0';
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	461a      	mov	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4413      	add	r3, r2
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
				break;
 8000700:	e03b      	b.n	800077a <echoWords+0xb6>
			} else if ( c == '\b') {
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	2b08      	cmp	r3, #8
 8000706:	d106      	bne.n	8000716 <echoWords+0x52>
				handleBackspace(command, &index);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4619      	mov	r1, r3
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ffba 	bl	8000688 <handleBackspace>
 8000714:	e017      	b.n	8000746 <echoWords+0x82>
			}
			else {
				if (index < maxLength - 1) {
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	1e5a      	subs	r2, r3, #1
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	429a      	cmp	r2, r3
 800071e:	dd12      	ble.n	8000746 <echoWords+0x82>
					command[index] = c;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	7cfa      	ldrb	r2, [r7, #19]
 800072a:	701a      	strb	r2, [r3, #0]
					command[index+1] = '\0';
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3301      	adds	r3, #1
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
					index++;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
					printf("%c", c);
 800073e:	7cfb      	ldrb	r3, [r7, #19]
 8000740:	4618      	mov	r0, r3
 8000742:	f000 febb 	bl	80014bc <putchar>
				}
			}
		}
		if(flashEnabled) {
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <echoWords+0xc8>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d00f      	beq.n	800076e <echoWords+0xaa>
//			init_systick();
			count++;
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
			if (count == 1000) {
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800075a:	d104      	bne.n	8000766 <echoWords+0xa2>
				LED_Toggle(EXTERN_LED);
 800075c:	2005      	movs	r0, #5
 800075e:	f000 fa92 	bl	8000c86 <LED_Toggle>
				count = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
			}
			delay_systick(10);
 8000766:	200a      	movs	r0, #10
 8000768:	f000 ff80 	bl	800166c <delay_systick>
 800076c:	e001      	b.n	8000772 <echoWords+0xae>
		}
		else {
			count = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
	while (!localModeEnabled) {
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <echoWords+0xcc>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0ae      	beq.n	80006d8 <echoWords+0x14>
		}
	}
	printf("\r\n");
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <echoWords+0xd0>)
 800077c:	f000 fe86 	bl	800148c <puts>
}
 8000780:	bf00      	nop
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40004400 	.word	0x40004400
 800078c:	20007d80 	.word	0x20007d80
 8000790:	20007d50 	.word	0x20007d50
 8000794:	08002d68 	.word	0x08002d68

08000798 <enterLocalMode>:

void enterLocalMode() {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	localModeEnabled = 1;
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <enterLocalMode+0x1c>)
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
	printf("***MANUAL OVERRIDE MODE ACTIVE***\r\n");
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <enterLocalMode+0x20>)
 80007a4:	f000 fe72 	bl	800148c <puts>
	LED_Off(EXTERN_LED);
 80007a8:	2005      	movs	r0, #5
 80007aa:	f000 fa55 	bl	8000c58 <LED_Off>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20007d50 	.word	0x20007d50
 80007b8:	08002d6c 	.word	0x08002d6c

080007bc <exitLocalMode>:

void exitLocalMode() {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	localModeEnabled = 0;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <exitLocalMode+0x28>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
	LED_Off(EXTERN_LED);
 80007c6:	2005      	movs	r0, #5
 80007c8:	f000 fa46 	bl	8000c58 <LED_Off>
	flashEnabled = 0;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <exitLocalMode+0x2c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
	currentSongIndex = 0;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <exitLocalMode+0x30>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
	printf("***REMOTE MODE ACTIVE***\r\n");
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <exitLocalMode+0x34>)
 80007da:	f000 fe57 	bl	800148c <puts>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20007d50 	.word	0x20007d50
 80007e8:	20007d80 	.word	0x20007d80
 80007ec:	20007d48 	.word	0x20007d48
 80007f0:	08002d90 	.word	0x08002d90

080007f4 <handleS1Button>:
uint32_t startTime;
uint32_t endTime;
uint8_t button_pressed = 0;
uint32_t button_pressed_duration = 0;

void handleS1Button() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	DAC_Set_Value(4000);//	init_systick();
 80007f8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80007fc:	f000 fc5e 	bl	80010bc <DAC_Set_Value>
	startTime = get_systick_count_ms();
 8000800:	f000 ff60 	bl	80016c4 <get_systick_count_ms>
 8000804:	4603      	mov	r3, r0
 8000806:	4a14      	ldr	r2, [pc, #80]	; (8000858 <handleS1Button+0x64>)
 8000808:	6013      	str	r3, [r2, #0]
	delay_systick(100);
 800080a:	2064      	movs	r0, #100	; 0x64
 800080c:	f000 ff2e 	bl	800166c <delay_systick>
	button_pressed = 1;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <handleS1Button+0x68>)
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]

	// Wait for the button to be released
	while (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin));
 8000816:	bf00      	nop
 8000818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f001 fd32 	bl	8002288 <HAL_GPIO_ReadPin>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f6      	bne.n	8000818 <handleS1Button+0x24>
	endTime = get_systick_count_ms();
 800082a:	f000 ff4b 	bl	80016c4 <get_systick_count_ms>
 800082e:	4603      	mov	r3, r0
 8000830:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <handleS1Button+0x6c>)
 8000832:	6013      	str	r3, [r2, #0]
	button_pressed_duration = endTime - startTime;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <handleS1Button+0x6c>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <handleS1Button+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	4a09      	ldr	r2, [pc, #36]	; (8000864 <handleS1Button+0x70>)
 8000840:	6013      	str	r3, [r2, #0]
	counter++;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <handleS1Button+0x74>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	4a07      	ldr	r2, [pc, #28]	; (8000868 <handleS1Button+0x74>)
 800084a:	6013      	str	r3, [r2, #0]
	DAC_Set_Value(0);
 800084c:	2000      	movs	r0, #0
 800084e:	f000 fc35 	bl	80010bc <DAC_Set_Value>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20007d5c 	.word	0x20007d5c
 800085c:	20007d64 	.word	0x20007d64
 8000860:	20007d60 	.word	0x20007d60
 8000864:	20007d68 	.word	0x20007d68
 8000868:	20007d58 	.word	0x20007d58

0800086c <project1_main>:


void project1_main() {
 800086c:	b580      	push	{r7, lr}
 800086e:	b092      	sub	sp, #72	; 0x48
 8000870:	af00      	add	r7, sp, #0
	init_systick();
 8000872:	f000 feb9 	bl	80015e8 <init_systick>
	GPIO_Init();
 8000876:	f000 f8bf 	bl	80009f8 <GPIO_Init>
	UART2_Init();
 800087a:	f000 fa39 	bl	8000cf0 <UART2_Init>
	printHelp();
 800087e:	f7ff fe47 	bl	8000510 <printHelp>
	DAC_Init();
 8000882:	f000 fbdf 	bl	8001044 <DAC_Init>
	DAC_Start();
 8000886:	f000 fc0f 	bl	80010a8 <DAC_Start>


	char command[50];
	uint32_t flash_count = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	647b      	str	r3, [r7, #68]	; 0x44

	while(1) {
		NVIC_DisableIRQ(USART2_IRQn);
 800088e:	2026      	movs	r0, #38	; 0x26
 8000890:	f7ff fd18 	bl	80002c4 <__NVIC_DisableIRQ>


		if (!localModeEnabled) {
 8000894:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <project1_main+0x160>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10b      	bne.n	80008b4 <project1_main+0x48>
			echoWords(command, sizeof(command));
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	2132      	movs	r1, #50	; 0x32
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff0e 	bl	80006c4 <echoWords>
			toggleCommand(command);
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe51 	bl	8000554 <toggleCommand>
 80008b2:	e7ec      	b.n	800088e <project1_main+0x22>
		}
		else // Manual Mode
		{
			if(button_pressed) // there is a press
 80008b4:	4b46      	ldr	r3, [pc, #280]	; (80009d0 <project1_main+0x164>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d070      	beq.n	800099e <project1_main+0x132>
			{
				if(button_pressed_duration >= 1000) // stop
 80008bc:	4b45      	ldr	r3, [pc, #276]	; (80009d4 <project1_main+0x168>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008c4:	d309      	bcc.n	80008da <project1_main+0x6e>
				{
					printf("STOP\r\n");
 80008c6:	4844      	ldr	r0, [pc, #272]	; (80009d8 <project1_main+0x16c>)
 80008c8:	f000 fde0 	bl	800148c <puts>
					LED_Off(EXTERN_LED);
 80008cc:	2005      	movs	r0, #5
 80008ce:	f000 f9c3 	bl	8000c58 <LED_Off>
					counter = 0;
 80008d2:	4b42      	ldr	r3, [pc, #264]	; (80009dc <project1_main+0x170>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	e05e      	b.n	8000998 <project1_main+0x12c>
				}
				else // duration < 1000
				{
					while((counter == 1) && (get_systick_count_ms() - startTime < 1000));
 80008da:	bf00      	nop
 80008dc:	4b3f      	ldr	r3, [pc, #252]	; (80009dc <project1_main+0x170>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d108      	bne.n	80008f6 <project1_main+0x8a>
 80008e4:	f000 feee 	bl	80016c4 <get_systick_count_ms>
 80008e8:	4602      	mov	r2, r0
 80008ea:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <project1_main+0x174>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008f4:	d3f2      	bcc.n	80008dc <project1_main+0x70>

					if(counter == 1) // single press
 80008f6:	4b39      	ldr	r3, [pc, #228]	; (80009dc <project1_main+0x170>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d130      	bne.n	8000960 <project1_main+0xf4>
					{
						if (playPauseState == 0) {
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <project1_main+0x178>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d122      	bne.n	800094c <project1_main+0xe0>
							playPauseState = 1;
 8000906:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <project1_main+0x178>)
 8000908:	2201      	movs	r2, #1
 800090a:	601a      	str	r2, [r3, #0]
							printf("PLAY\r\n");
 800090c:	4836      	ldr	r0, [pc, #216]	; (80009e8 <project1_main+0x17c>)
 800090e:	f000 fdbd 	bl	800148c <puts>
							LED_On(EXTERN_LED);
 8000912:	2005      	movs	r0, #5
 8000914:	f000 f98a 	bl	8000c2c <LED_On>
							if (!midiPlaybackStarted) {
 8000918:	4b34      	ldr	r3, [pc, #208]	; (80009ec <project1_main+0x180>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d112      	bne.n	8000946 <project1_main+0xda>
                            start_midi(get_song(currentSongIndex - 1));
 8000920:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <project1_main+0x184>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3b01      	subs	r3, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fbe6 	bl	8001100 <get_song>
 8000934:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000938:	e893 0003 	ldmia.w	r3, {r0, r1}
 800093c:	f000 fca0 	bl	8001280 <start_midi>
                            midiPlaybackStarted = 1;
 8000940:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <project1_main+0x180>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]
							}
							play_midi();
 8000946:	f000 fc53 	bl	80011f0 <play_midi>
 800094a:	e022      	b.n	8000992 <project1_main+0x126>
						} else {
							playPauseState = 0;
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <project1_main+0x178>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
							printf("PAUSE\r\n");
 8000952:	4828      	ldr	r0, [pc, #160]	; (80009f4 <project1_main+0x188>)
 8000954:	f000 fd9a 	bl	800148c <puts>
							LED_Off(EXTERN_LED);
 8000958:	2005      	movs	r0, #5
 800095a:	f000 f97d 	bl	8000c58 <LED_Off>
 800095e:	e018      	b.n	8000992 <project1_main+0x126>
						}
					}
					else // double press
					{
						if (currentSongIndex >= NUM_SONGS) {
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <project1_main+0x184>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b04      	cmp	r3, #4
 8000966:	d902      	bls.n	800096e <project1_main+0x102>
							currentSongIndex = 0;
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <project1_main+0x184>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
						}
						song currentSong = get_song(currentSongIndex);
 800096e:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <project1_main+0x184>)
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	463b      	mov	r3, r7
 8000974:	4611      	mov	r1, r2
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fbc2 	bl	8001100 <get_song>
						displaySongInfo(currentSong);
 800097c:	463b      	mov	r3, r7
 800097e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000982:	f7ff fdb3 	bl	80004ec <displaySongInfo>
						currentSongIndex++;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <project1_main+0x184>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	3301      	adds	r3, #1
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <project1_main+0x184>)
 8000990:	701a      	strb	r2, [r3, #0]
					}
					counter = 0;
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <project1_main+0x170>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
				}
				button_pressed = 0;
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <project1_main+0x164>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
			else
			{
				// no button press do nothing
			}

			if(playPauseState == 0)
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <project1_main+0x178>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10f      	bne.n	80009c6 <project1_main+0x15a>
			{
				flash_count++;
 80009a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009a8:	3301      	adds	r3, #1
 80009aa:	647b      	str	r3, [r7, #68]	; 0x44
				if (flash_count >= 500) {
 80009ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009b2:	d304      	bcc.n	80009be <project1_main+0x152>
					LED_Toggle(EXTERN_LED);
 80009b4:	2005      	movs	r0, #5
 80009b6:	f000 f966 	bl	8000c86 <LED_Toggle>
					flash_count = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	647b      	str	r3, [r7, #68]	; 0x44
				}
				delay_systick(1);
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 fe54 	bl	800166c <delay_systick>
 80009c4:	e763      	b.n	800088e <project1_main+0x22>
			}
			else
			{
				flash_count = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	647b      	str	r3, [r7, #68]	; 0x44
		NVIC_DisableIRQ(USART2_IRQn);
 80009ca:	e760      	b.n	800088e <project1_main+0x22>
 80009cc:	20007d50 	.word	0x20007d50
 80009d0:	20007d64 	.word	0x20007d64
 80009d4:	20007d68 	.word	0x20007d68
 80009d8:	08002dac 	.word	0x08002dac
 80009dc:	20007d58 	.word	0x20007d58
 80009e0:	20007d5c 	.word	0x20007d5c
 80009e4:	20007d54 	.word	0x20007d54
 80009e8:	08002db4 	.word	0x08002db4
 80009ec:	20007d4c 	.word	0x20007d4c
 80009f0:	20007d48 	.word	0x20007d48
 80009f4:	08002dbc 	.word	0x08002dbc

080009f8 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <GPIO_Init+0xd8>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a2f      	ldr	r2, [pc, #188]	; (8000ad0 <GPIO_Init+0xd8>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <GPIO_Init+0xd8>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <GPIO_Init+0xd8>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a29      	ldr	r2, [pc, #164]	; (8000ad0 <GPIO_Init+0xd8>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <GPIO_Init+0xd8>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <GPIO_Init+0xd8>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <GPIO_Init+0xd8>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <GPIO_Init+0xd8>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <GPIO_Init+0xd8>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <GPIO_Init+0xd8>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <GPIO_Init+0xd8>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <GPIO_Init+0xdc>)
 8000a86:	f001 fa55 	bl	8001f34 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 8000a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a90:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a94:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f001 fa46 	bl	8001f34 <HAL_GPIO_Init>

	/* EXTI15_10_IRQn interrupt init*/
	// Note you will have to add EXTI15_10_IRQn Interrupt handler function as well
//	 This is the interrupt handler for the blue button
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2028      	movs	r0, #40	; 0x28
 8000aae:	f001 f85c 	bl	8001b6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ab2:	2028      	movs	r0, #40	; 0x28
 8000ab4:	f001 f875 	bl	8001ba2 <HAL_NVIC_EnableIRQ>

	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2017      	movs	r0, #23
 8000abe:	f001 f854 	bl	8001b6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ac2:	2017      	movs	r0, #23
 8000ac4:	f001 f86d 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
\
}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	48000800 	.word	0x48000800

08000ad8 <HAL_GPIO_EXTI_Callback>:
volatile uint32_t lastS1PressTime = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == B1_Pin) {
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ae8:	d109      	bne.n	8000afe <HAL_GPIO_EXTI_Callback+0x26>
        if (localModeEnabled) {
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x44>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <HAL_GPIO_EXTI_Callback+0x20>
            exitLocalMode();
 8000af2:	f7ff fe63 	bl	80007bc <exitLocalMode>
        }
    } else if (GPIO_Pin == S1_Pin && localModeEnabled) {
        handleS1Button();

    }
}
 8000af6:	e00c      	b.n	8000b12 <HAL_GPIO_EXTI_Callback+0x3a>
            enterLocalMode();
 8000af8:	f7ff fe4e 	bl	8000798 <enterLocalMode>
}
 8000afc:	e009      	b.n	8000b12 <HAL_GPIO_EXTI_Callback+0x3a>
    } else if (GPIO_Pin == S1_Pin && localModeEnabled) {
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b04:	d105      	bne.n	8000b12 <HAL_GPIO_EXTI_Callback+0x3a>
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x44>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_GPIO_EXTI_Callback+0x3a>
        handleS1Button();
 8000b0e:	f7ff fe71 	bl	80007f4 <handleS1Button>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20007d50 	.word	0x20007d50

08000b20 <EXTI15_10_IRQHandler>:

// Modify EXTI9_5_IRQHandler and EXTI15_10_IRQHandler in GPIO.c
void EXTI15_10_IRQHandler(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(B1_Pin) != RESET) {
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <EXTI15_10_IRQHandler+0x24>)
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d007      	beq.n	8000b40 <EXTI15_10_IRQHandler+0x20>
        HAL_GPIO_EXTI_Callback(B1_Pin);
 8000b30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b34:	f7ff ffd0 	bl	8000ad8 <HAL_GPIO_EXTI_Callback>
        __HAL_GPIO_EXTI_CLEAR_IT(B1_Pin);
 8000b38:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <EXTI15_10_IRQHandler+0x24>)
 8000b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3e:	615a      	str	r2, [r3, #20]
    }
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40010400 	.word	0x40010400

08000b48 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(S1_Pin) != RESET) {
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <EXTI9_5_IRQHandler+0x24>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d007      	beq.n	8000b68 <EXTI9_5_IRQHandler+0x20>
        HAL_GPIO_EXTI_Callback(S1_Pin);
 8000b58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b5c:	f7ff ffbc 	bl	8000ad8 <HAL_GPIO_EXTI_Callback>
        __HAL_GPIO_EXTI_CLEAR_IT(S1_Pin);
 8000b60:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <EXTI9_5_IRQHandler+0x24>)
 8000b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b66:	615a      	str	r2, [r3, #20]
    }
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40010400 	.word	0x40010400

08000b70 <LED_Init>:
//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************
#define LED_PIN 5

void LED_Init(uint8_t pin){
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <LED_Init+0xb8>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a2a      	ldr	r2, [pc, #168]	; (8000c28 <LED_Init+0xb8>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));
 8000b86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2103      	movs	r1, #3
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 8000ba0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2101      	movs	r1, #1
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 8000bb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000bce:	4013      	ands	r3, r2
 8000bd0:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 8000bd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bd6:	689a      	ldr	r2, [r3, #8]
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	2103      	movs	r1, #3
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000be6:	4313      	orrs	r3, r2
 8000be8:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 8000bea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000bfe:	4013      	ands	r3, r2
 8000c00:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 8000c02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60cb      	str	r3, [r1, #12]
	
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40021000 	.word	0x40021000

08000c2c <LED_On>:

//******************************************************************************************
// Turn LED On
//******************************************************************************************
void LED_On(uint8_t pin){
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR |= (1UL<<pin);
 8000c36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c3a:	695a      	ldr	r2, [r3, #20]
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2101      	movs	r1, #1
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	614b      	str	r3, [r1, #20]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LED_Off>:

//******************************************************************************************
// Turn LED Off
//******************************************************************************************
void LED_Off(uint8_t pin){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR &= ~(1UL<<pin);
 8000c62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c66:	695a      	ldr	r2, [r3, #20]
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000c76:	4013      	ands	r3, r2
 8000c78:	614b      	str	r3, [r1, #20]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <LED_Toggle>:

//******************************************************************************************
// Toggle LED 
//******************************************************************************************
void LED_Toggle(uint8_t pin){
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR ^= (1UL<<pin);
 8000c90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c94:	695a      	ldr	r2, [r3, #20]
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2101      	movs	r1, #1
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000ca2:	4053      	eors	r3, r2
 8000ca4:	614b      	str	r3, [r1, #20]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <__NVIC_EnableIRQ>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <UART2_Init+0x44>)
 8000cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <UART2_Init+0x44>)
 8000cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfe:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <UART2_Init+0x44>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <UART2_Init+0x44>)
 8000d08:	f023 030c 	bic.w	r3, r3, #12
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <UART2_Init+0x44>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <UART2_Init+0x44>)
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000d20:	f000 f80c 	bl	8000d3c <UART2_GPIO_Init>
	USART_Init(USART2);
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <UART2_Init+0x48>)
 8000d26:	f000 f851 	bl	8000dcc <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
 8000d2a:	2026      	movs	r0, #38	; 0x26
 8000d2c:	f7ff ffc2 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40004400 	.word	0x40004400

08000d3c <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000d40:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <UART2_GPIO_Init+0x8c>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d44:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <UART2_GPIO_Init+0x8c>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000d4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d5a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000d5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d66:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000d6a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000d6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000d7a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000d7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d86:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000d8a:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000d8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d96:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000d9a:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000d9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000daa:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000dac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000db6:	f023 030c 	bic.w	r3, r3, #12
 8000dba:	6053      	str	r3, [r2, #4]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000

08000dcc <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 0201 	bic.w	r2, r3, #1
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f242 028d 	movw	r2, #8333	; 0x208d
 8000e0a:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f043 020c 	orr.w	r2, r3, #12
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a2f      	ldr	r2, [pc, #188]	; (8000ed8 <USART_Init+0x10c>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d129      	bne.n	8000e74 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f043 0220 	orr.w	r2, r3, #32
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f023 0210 	bic.w	r2, r3, #16
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f023 0201 	bic.w	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a19      	ldr	r2, [pc, #100]	; (8000edc <USART_Init+0x110>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d111      	bne.n	8000ea0 <USART_Init+0xd4>
		USARTx->ICR |= USART_ICR_TCCF;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <USART_Init+0x114>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <USART_Init+0x114>)
 8000e8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e92:	6093      	str	r3, [r2, #8]
		USARTx->CR1 |= USART_CR1_RXNEIE; // (1 << 5)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f043 0220 	orr.w	r2, r3, #32
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	601a      	str	r2, [r3, #0]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f043 0201 	orr.w	r2, r3, #1
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000eac:	bf00      	nop
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f9      	beq.n	8000eae <USART_Init+0xe2>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000eba:	bf00      	nop
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f9      	beq.n	8000ebc <USART_Init+0xf0>
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40004c00 	.word	0x40004c00
 8000edc:	40004400 	.word	0x40004400
 8000ee0:	40013800 	.word	0x40013800

08000ee4 <USART_Read_Nonblocking>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

uint8_t USART_Read_Nonblocking(USART_TypeDef * USARTx) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    if (USARTx->ISR & USART_ISR_RXNE) { // If RXNE (RX not empty) bit is set
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69db      	ldr	r3, [r3, #28]
 8000ef0:	f003 0320 	and.w	r3, r3, #32
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <USART_Read_Nonblocking+0x1e>
        return ((uint8_t)(USARTx->RDR & 0xFF));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	e000      	b.n	8000f04 <USART_Read_Nonblocking+0x20>
    }
    return 0;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <USART_Write>:


void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e014      	b.n	8000f4c <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 8000f22:	bf00      	nop
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f9      	beq.n	8000f24 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	4413      	add	r3, r2
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8000f3e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f42:	f000 f819 	bl	8000f78 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8e6      	bhi.n	8000f22 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 8000f54:	bf00      	nop
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f9      	beq.n	8000f56 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	61da      	str	r2, [r3, #28]
}   
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2264      	movs	r2, #100	; 0x64
 8000f84:	fb03 f202 	mul.w	r2, r3, r2
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <USART_Delay+0x3c>)
 8000f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f8e:	1ad2      	subs	r2, r2, r3
 8000f90:	0852      	lsrs	r2, r2, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000f98:	bf00      	nop
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f9      	bne.n	8000f9a <USART_Delay+0x22>
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	24924925 	.word	0x24924925

08000fb8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a15      	ldr	r2, [pc, #84]	; (800102c <HAL_DAC_MspInit+0x74>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d124      	bne.n	8001024 <HAL_DAC_MspInit+0x6c>
  {
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_DAC_MspInit+0x78>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_DAC_MspInit+0x78>)
 8000fe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_DAC_MspInit+0x78>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_DAC_MspInit+0x78>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_DAC_MspInit+0x78>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_DAC_MspInit+0x78>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800100a:	2310      	movs	r3, #16
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f000 ff88 	bl	8001f34 <HAL_GPIO_Init>
  }

}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	; 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40007400 	.word	0x40007400
 8001030:	40021000 	.word	0x40021000

08001034 <Error_Handler>:
void Error_Handler() {
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
//Print errors if you get them
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <DAC_Init>:
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
  }

}

void DAC_Init () {
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2224      	movs	r2, #36	; 0x24
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f001 f951 	bl	80022f8 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <DAC_Init+0x5c>)
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <DAC_Init+0x60>)
 800105a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800105c:	4810      	ldr	r0, [pc, #64]	; (80010a0 <DAC_Init+0x5c>)
 800105e:	f000 fdba 	bl	8001bd6 <HAL_DAC_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <DAC_Init+0x28>
  {
    Error_Handler();
 8001068:	f7ff ffe4 	bl	8001034 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <DAC_Init+0x5c>)
 8001088:	f000 fe39 	bl	8001cfe <HAL_DAC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <DAC_Init+0x52>
  {
    Error_Handler();
 8001092:	f7ff ffcf 	bl	8001034 <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20007d6c 	.word	0x20007d6c
 80010a4:	40007400 	.word	0x40007400

080010a8 <DAC_Start>:

void DAC_Start () {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	HAL_DAC_Start (&hdac1, DAC_CHANNEL_1);
 80010ac:	2100      	movs	r1, #0
 80010ae:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DAC_Start+0x10>)
 80010b0:	f000 fdb3 	bl	8001c1a <HAL_DAC_Start>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20007d6c 	.word	0x20007d6c

080010bc <DAC_Set_Value>:

void DAC_Set_Value (uint32_t value) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue (&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <DAC_Set_Value+0x1c>)
 80010cc:	f000 fdf2 	bl	8001cb4 <HAL_DAC_SetValue>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20007d6c 	.word	0x20007d6c

080010dc <main>:



int flashEnabled = 0;

int main(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
    // Initialization code
	HAL_Init();
 80010e0:	f000 fbdd 	bl	800189e <HAL_Init>
    System_Clock_Init(); // Set System Clock = 80 MHz
 80010e4:	f000 f8e2 	bl	80012ac <System_Clock_Init>
    LED_Init(EXTERN_LED);
 80010e8:	2005      	movs	r0, #5
 80010ea:	f7ff fd41 	bl	8000b70 <LED_Init>
    UART2_Init();
 80010ee:	f7ff fdff 	bl	8000cf0 <UART2_Init>



    project1_main();
 80010f2:	f7ff fbbb 	bl	800086c <project1_main>
//    run_wave(1);
    parseDelayMain();
 80010f6:	f000 fb51 	bl	800179c <parseDelayMain>
 80010fa:	2300      	movs	r3, #0

}
 80010fc:	4618      	mov	r0, r3
 80010fe:	bd80      	pop	{r7, pc}

08001100 <get_song>:

// Convenience list of all the songs in one array.
song songs[] = {{song0, sizeof (song0)}, {song1, sizeof (song1)}, {song2, sizeof (song2)}, {song3, sizeof (song3)},
				{song4, sizeof (song4)}};

song get_song (uint8_t song_number){
 8001100:	b490      	push	{r4, r7}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
	return songs[song_number];
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <get_song+0x2c>)
 8001112:	460c      	mov	r4, r1
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4413      	add	r3, r2
 8001118:	e893 0003 	ldmia.w	r3, {r0, r1}
 800111c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bc90      	pop	{r4, r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20007aa4 	.word	0x20007aa4

08001130 <hertz_to_duration>:

//uint32_t get_tick_speed ();


// Convert from hertz to ticks
uint32_t hertz_to_duration (float hertz) {
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t tick_speed = TICK_SPEED; // This is a hack, you'll fix it later
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	60fb      	str	r3, [r7, #12]
	if (hertz == 0)
 8001140:	edd7 7a01 	vldr	s15, [r7, #4]
 8001144:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	d101      	bne.n	8001152 <hertz_to_duration+0x22>
		return 0;
 800114e:	2300      	movs	r3, #0
 8001150:	e014      	b.n	800117c <hertz_to_duration+0x4c>
	float duration = 1 / hertz;
 8001152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001156:	ed97 7a01 	vldr	s14, [r7, #4]
 800115a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800115e:	edc7 7a02 	vstr	s15, [r7, #8]
	return (uint32_t) (duration * tick_speed);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800116c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <play_tone>:
	return 0;
}

// Play any tones in the array
void play_tone(uint8_t note)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	uint32_t startTime = get_systick_count_ms();
 8001192:	f000 fa97 	bl	80016c4 <get_systick_count_ms>
 8001196:	60f8      	str	r0, [r7, #12]
	uint32_t duration = hertz_to_duration(notes[note]);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <play_tone+0x64>)
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	edd3 7a00 	vldr	s15, [r3]
 80011a4:	eeb0 0a67 	vmov.f32	s0, s15
 80011a8:	f7ff ffc2 	bl	8001130 <hertz_to_duration>
 80011ac:	60b8      	str	r0, [r7, #8]
	while((get_systick_count_ms() - startTime) < duration)
 80011ae:	e010      	b.n	80011d2 <play_tone+0x4a>
	{
		if ((get_systick_count_ms() - startTime) < (duration >> 1))
 80011b0:	f000 fa88 	bl	80016c4 <get_systick_count_ms>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad2      	subs	r2, r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	085b      	lsrs	r3, r3, #1
 80011be:	429a      	cmp	r2, r3
 80011c0:	d204      	bcs.n	80011cc <play_tone+0x44>
		{
			DAC_Set_Value(2000); // max 4095
 80011c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011c6:	f7ff ff79 	bl	80010bc <DAC_Set_Value>
 80011ca:	e002      	b.n	80011d2 <play_tone+0x4a>
		}
		else
		{
			DAC_Set_Value(0);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff ff75 	bl	80010bc <DAC_Set_Value>
	while((get_systick_count_ms() - startTime) < duration)
 80011d2:	f000 fa77 	bl	80016c4 <get_systick_count_ms>
 80011d6:	4602      	mov	r2, r0
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d8e6      	bhi.n	80011b0 <play_tone+0x28>
		}
	}
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20007acc 	.word	0x20007acc

080011f0 <play_midi>:
uint8_t* midi_data;
uint32_t size;

// Function to parse and play the MIDI data
void play_midi()
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	if(idx < size)
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <play_midi+0x84>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <play_midi+0x88>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d230      	bcs.n	8001264 <play_midi+0x74>
	{
		// Check for a note-on event
		if (midi_data[idx] == 0x90) {
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <play_midi+0x8c>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <play_midi+0x84>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b90      	cmp	r3, #144	; 0x90
 8001210:	d111      	bne.n	8001236 <play_midi+0x46>
			// Extract note and velocity
			uint8_t note = midi_data[idx + 1];
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <play_midi+0x8c>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <play_midi+0x84>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	71fb      	strb	r3, [r7, #7]
//			uint8_t velocity = midi_data[idx + 2];

			play_tone(note);
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ffaf 	bl	8001188 <play_tone>

			// Move to the next MIDI event
			idx += 3;
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <play_midi+0x84>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3303      	adds	r3, #3
 8001230:	4a10      	ldr	r2, [pc, #64]	; (8001274 <play_midi+0x84>)
 8001232:	6013      	str	r3, [r2, #0]
	else // song end
	{
		idx = 0;
	}

}
 8001234:	e019      	b.n	800126a <play_midi+0x7a>
		else if (midi_data[idx] == 0x80) {
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <play_midi+0x8c>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <play_midi+0x84>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b80      	cmp	r3, #128	; 0x80
 8001244:	d108      	bne.n	8001258 <play_midi+0x68>
			DAC_Set_Value(0);
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff ff38 	bl	80010bc <DAC_Set_Value>
			idx += 3; // Assuming each event is minimum 3 bytes, adjust if needed
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <play_midi+0x84>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3303      	adds	r3, #3
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <play_midi+0x84>)
 8001254:	6013      	str	r3, [r2, #0]
}
 8001256:	e008      	b.n	800126a <play_midi+0x7a>
			idx++;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <play_midi+0x84>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <play_midi+0x84>)
 8001260:	6013      	str	r3, [r2, #0]
}
 8001262:	e002      	b.n	800126a <play_midi+0x7a>
		idx = 0;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <play_midi+0x84>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20007d84 	.word	0x20007d84
 8001278:	20007d8c 	.word	0x20007d8c
 800127c:	20007d88 	.word	0x20007d88

08001280 <start_midi>:

void start_midi(song midi)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	463b      	mov	r3, r7
 8001288:	e883 0003 	stmia.w	r3, {r0, r1}
//	stop_midi();
	midi_data = midi.p_song;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <start_midi+0x24>)
 8001290:	6013      	str	r3, [r2, #0]
	size = midi.size;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <start_midi+0x28>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20007d88 	.word	0x20007d88
 80012a8:	20007d8c 	.word	0x20007d8c

080012ac <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80012b2:	4b6b      	ldr	r3, [pc, #428]	; (8001460 <System_Clock_Init+0x1b4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6a      	ldr	r2, [pc, #424]	; (8001460 <System_Clock_Init+0x1b4>)
 80012b8:	f023 0307 	bic.w	r3, r3, #7
 80012bc:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80012be:	4b68      	ldr	r3, [pc, #416]	; (8001460 <System_Clock_Init+0x1b4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a67      	ldr	r2, [pc, #412]	; (8001460 <System_Clock_Init+0x1b4>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80012ca:	4b66      	ldr	r3, [pc, #408]	; (8001464 <System_Clock_Init+0x1b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a65      	ldr	r2, [pc, #404]	; (8001464 <System_Clock_Init+0x1b8>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80012d6:	bf00      	nop
 80012d8:	4b62      	ldr	r3, [pc, #392]	; (8001464 <System_Clock_Init+0x1b8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f9      	beq.n	80012d8 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80012e4:	2310      	movs	r3, #16
 80012e6:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80012e8:	4b5e      	ldr	r3, [pc, #376]	; (8001464 <System_Clock_Init+0x1b8>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	4a5d      	ldr	r2, [pc, #372]	; (8001464 <System_Clock_Init+0x1b8>)
 80012ee:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80012f2:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 80012f4:	4b5b      	ldr	r3, [pc, #364]	; (8001464 <System_Clock_Init+0x1b8>)
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	061b      	lsls	r3, r3, #24
 80012fc:	4959      	ldr	r1, [pc, #356]	; (8001464 <System_Clock_Init+0x1b8>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8001302:	4b58      	ldr	r3, [pc, #352]	; (8001464 <System_Clock_Init+0x1b8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a57      	ldr	r2, [pc, #348]	; (8001464 <System_Clock_Init+0x1b8>)
 8001308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800130c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 800130e:	bf00      	nop
 8001310:	4b54      	ldr	r3, [pc, #336]	; (8001464 <System_Clock_Init+0x1b8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001318:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800131c:	d0f8      	beq.n	8001310 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 800131e:	4b51      	ldr	r3, [pc, #324]	; (8001464 <System_Clock_Init+0x1b8>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	4a50      	ldr	r2, [pc, #320]	; (8001464 <System_Clock_Init+0x1b8>)
 8001324:	f023 0303 	bic.w	r3, r3, #3
 8001328:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800132a:	4b4e      	ldr	r3, [pc, #312]	; (8001464 <System_Clock_Init+0x1b8>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	4a4d      	ldr	r2, [pc, #308]	; (8001464 <System_Clock_Init+0x1b8>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8001336:	4b4b      	ldr	r3, [pc, #300]	; (8001464 <System_Clock_Init+0x1b8>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800133e:	4a49      	ldr	r2, [pc, #292]	; (8001464 <System_Clock_Init+0x1b8>)
 8001340:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001344:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8001346:	4b47      	ldr	r3, [pc, #284]	; (8001464 <System_Clock_Init+0x1b8>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800134e:	4a45      	ldr	r2, [pc, #276]	; (8001464 <System_Clock_Init+0x1b8>)
 8001350:	f043 0310 	orr.w	r3, r3, #16
 8001354:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8001356:	4b43      	ldr	r3, [pc, #268]	; (8001464 <System_Clock_Init+0x1b8>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	4a42      	ldr	r2, [pc, #264]	; (8001464 <System_Clock_Init+0x1b8>)
 800135c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001360:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8001362:	4b40      	ldr	r3, [pc, #256]	; (8001464 <System_Clock_Init+0x1b8>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	4a3f      	ldr	r2, [pc, #252]	; (8001464 <System_Clock_Init+0x1b8>)
 8001368:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800136c:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <System_Clock_Init+0x1b8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a3c      	ldr	r2, [pc, #240]	; (8001464 <System_Clock_Init+0x1b8>)
 8001374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001378:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 800137a:	bf00      	nop
 800137c:	4b39      	ldr	r3, [pc, #228]	; (8001464 <System_Clock_Init+0x1b8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f9      	beq.n	800137c <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <System_Clock_Init+0x1b8>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	4a35      	ldr	r2, [pc, #212]	; (8001464 <System_Clock_Init+0x1b8>)
 800138e:	f023 0303 	bic.w	r3, r3, #3
 8001392:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8001394:	4b33      	ldr	r3, [pc, #204]	; (8001464 <System_Clock_Init+0x1b8>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4a32      	ldr	r2, [pc, #200]	; (8001464 <System_Clock_Init+0x1b8>)
 800139a:	f043 0303 	orr.w	r3, r3, #3
 800139e:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80013a0:	bf00      	nop
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <System_Clock_Init+0x1b8>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	d1f9      	bne.n	80013a2 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80013ae:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <System_Clock_Init+0x1b8>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	4a2c      	ldr	r2, [pc, #176]	; (8001464 <System_Clock_Init+0x1b8>)
 80013b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013b8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <System_Clock_Init+0x1b8>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	4a29      	ldr	r2, [pc, #164]	; (8001464 <System_Clock_Init+0x1b8>)
 80013c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013c4:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <System_Clock_Init+0x1b8>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	4a26      	ldr	r2, [pc, #152]	; (8001464 <System_Clock_Init+0x1b8>)
 80013cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013d0:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <System_Clock_Init+0x1b8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a23      	ldr	r2, [pc, #140]	; (8001464 <System_Clock_Init+0x1b8>)
 80013d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80013dc:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80013de:	bf00      	nop
 80013e0:	4b20      	ldr	r3, [pc, #128]	; (8001464 <System_Clock_Init+0x1b8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80013ec:	d0f8      	beq.n	80013e0 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <System_Clock_Init+0x1b8>)
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <System_Clock_Init+0x1b8>)
 80013f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80013f8:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <System_Clock_Init+0x1b8>)
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	4a19      	ldr	r2, [pc, #100]	; (8001464 <System_Clock_Init+0x1b8>)
 8001400:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8001404:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <System_Clock_Init+0x1b8>)
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	4a16      	ldr	r2, [pc, #88]	; (8001464 <System_Clock_Init+0x1b8>)
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <System_Clock_Init+0x1b8>)
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	4a13      	ldr	r2, [pc, #76]	; (8001464 <System_Clock_Init+0x1b8>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <System_Clock_Init+0x1b8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a10      	ldr	r2, [pc, #64]	; (8001464 <System_Clock_Init+0x1b8>)
 8001424:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001428:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800142a:	bf00      	nop
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <System_Clock_Init+0x1b8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f9      	beq.n	800142c <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <System_Clock_Init+0x1b8>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143e:	4a09      	ldr	r2, [pc, #36]	; (8001464 <System_Clock_Init+0x1b8>)
 8001440:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <System_Clock_Init+0x1b8>)
 800144a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144c:	4a05      	ldr	r2, [pc, #20]	; (8001464 <System_Clock_Init+0x1b8>)
 800144e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001452:	6613      	str	r3, [r2, #96]	; 0x60
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40022000 	.word	0x40022000
 8001464:	40021000 	.word	0x40021000

08001468 <print_string>:
#include <stdio.h>
#include <stdarg.h>

static char buffer[128];

static void print_string (const char* string, int len) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
    USART_Write (USART2, (unsigned char*) string, len);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <print_string+0x20>)
 800147a:	f7ff fd49 	bl	8000f10 <USART_Write>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40004400 	.word	0x40004400

0800148c <puts>:

int puts (const char* string){
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    int len = strlen (string);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7fe fea5 	bl	80001e4 <strlen>
 800149a:	4603      	mov	r3, r0
 800149c:	60fb      	str	r3, [r7, #12]
    print_string (string, len);
 800149e:	68f9      	ldr	r1, [r7, #12]
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ffe1 	bl	8001468 <print_string>
    print_string ("\n", 1);
 80014a6:	2101      	movs	r1, #1
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <puts+0x2c>)
 80014aa:	f7ff ffdd 	bl	8001468 <print_string>
    return len;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	08002dc4 	.word	0x08002dc4

080014bc <putchar>:

int putchar (int chr){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    print_string ((char*)&chr, 1);
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2101      	movs	r1, #1
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ffcd 	bl	8001468 <print_string>
    return chr;
 80014ce:	687b      	ldr	r3, [r7, #4]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <printf>:

int printf (const char* format, ...) {
 80014d8:	b40f      	push	{r0, r1, r2, r3}
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
    va_list aptr;
    int ret;

    va_start(aptr, format);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	603b      	str	r3, [r7, #0]
    ret = vsprintf(buffer, format, aptr);
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	6939      	ldr	r1, [r7, #16]
 80014ea:	4808      	ldr	r0, [pc, #32]	; (800150c <printf+0x34>)
 80014ec:	f000 fefa 	bl	80022e4 <vsiprintf>
 80014f0:	6078      	str	r0, [r7, #4]
    va_end(aptr);
    print_string (buffer, ret);
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <printf+0x34>)
 80014f6:	f7ff ffb7 	bl	8001468 <print_string>

    return(ret);
 80014fa:	687b      	ldr	r3, [r7, #4]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001506:	b004      	add	sp, #16
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20007d90 	.word	0x20007d90

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f000 fef6 	bl	8002330 <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20018000 	.word	0x20018000
 8001570:	00000400 	.word	0x00000400
 8001574:	20007e10 	.word	0x20007e10
 8001578:	20007f68 	.word	0x20007f68

0800157c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <SystemInit+0x64>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a16      	ldr	r2, [pc, #88]	; (80015e0 <SystemInit+0x64>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <SystemInit+0x68>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <SystemInit+0x68>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <SystemInit+0x68>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <SystemInit+0x68>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <SystemInit+0x68>)
 80015a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <SystemInit+0x68>)
 80015b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <SystemInit+0x68>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <SystemInit+0x68>)
 80015c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <SystemInit+0x68>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SystemInit+0x64>)
 80015ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d2:	609a      	str	r2, [r3, #8]
#endif
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00
 80015e4:	40021000 	.word	0x40021000

080015e8 <init_systick>:

};

static struct Register *SysTick = (struct Register *)0xE000E010;
// This function is to Initialize SysTick registers
void init_systick() {
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
    SysTick->RVR = 79999; // 1ms timer
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <init_systick+0x60>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a16      	ldr	r2, [pc, #88]	; (800164c <init_systick+0x64>)
 80015f2:	605a      	str	r2, [r3, #4]
    SysTick->CSR = 0;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <init_systick+0x60>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
    SysTick->CSR |= 1 << 16;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <init_systick+0x60>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <init_systick+0x60>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800160a:	601a      	str	r2, [r3, #0]
    SysTick->CSR |= 1 << 2;
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <init_systick+0x60>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <init_systick+0x60>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0204 	orr.w	r2, r2, #4
 800161a:	601a      	str	r2, [r3, #0]
    SysTick->CSR |= 1 << 1;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <init_systick+0x60>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <init_systick+0x60>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0202 	orr.w	r2, r2, #2
 800162a:	601a      	str	r2, [r3, #0]
    SysTick->CSR |= 1 << 0;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <init_systick+0x60>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <init_systick+0x60>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20007cd0 	.word	0x20007cd0
 800164c:	0001387f 	.word	0x0001387f

08001650 <SysTick_Handler>:
uint32_t systic_count = 0;

void SysTick_Handler() {
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
	systic_count++;
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <SysTick_Handler+0x18>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	4a03      	ldr	r2, [pc, #12]	; (8001668 <SysTick_Handler+0x18>)
 800165c:	6013      	str	r3, [r2, #0]

}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	20007e14 	.word	0x20007e14

0800166c <delay_systick>:

// This fuction is to create delay using SysTick timer counter
void delay_systick(uint32_t d)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	// Create a for loop that loops 10 times
	// Inside that for loop check the COUNTFLAG bit in the CTRL (CSR)
	// register in a loop. When that bit is set exit this inner loop
	// to do another pass in the outer loop of 10.

	 for (int i = 0; i < d; i++) {
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e00a      	b.n	8001690 <delay_systick+0x24>
	        while (!(SysTick->CSR & (1 << 16)));
 800167a:	bf00      	nop
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <delay_systick+0x3c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f8      	beq.n	800167c <delay_systick+0x10>
	 for (int i = 0; i < d; i++) {
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3301      	adds	r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f0      	bhi.n	800167a <delay_systick+0xe>
	            // Wait for the COUNTFLAG bit in the CTRL (CSR) to be set.
	 }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20007cd0 	.word	0x20007cd0

080016ac <get_systick>:

uint32_t get_systick() {
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
	return SysTick->CVR;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <get_systick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	20007cd0 	.word	0x20007cd0

080016c4 <get_systick_count_ms>:

uint32_t get_systick_count_ms()
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
	return systic_count;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <get_systick_count_ms+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20007e14 	.word	0x20007e14

080016dc <delay_systick_ms>:

void delay_systick_ms(uint32_t ms) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
    uint32_t start = get_systick();
 80016e4:	f7ff ffe2 	bl	80016ac <get_systick>
 80016e8:	60f8      	str	r0, [r7, #12]
    uint32_t target = start + ms;
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	60bb      	str	r3, [r7, #8]

    while (get_systick() < target);
 80016f2:	bf00      	nop
 80016f4:	f7ff ffda 	bl	80016ac <get_systick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d8f9      	bhi.n	80016f4 <delay_systick_ms+0x18>
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <convert_to_uint32>:

uint32_t convert_to_uint24 (uint8_t* p_value) {
    return (p_value[0] << 16) + (p_value[1] << 8) + p_value[2];
}

uint32_t convert_to_uint32(uint8_t *p_value) {
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
//    return (p_value[0] << 24) | (p_value[1] << 16) | (p_value[2] << 8) | p_value[3];
	return (p_value [0] << 24) + (p_value [1] << 16) + (p_value [2] << 8) + p_value [5];
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	061a      	lsls	r2, r3, #24
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3301      	adds	r3, #1
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	041b      	lsls	r3, r3, #16
 8001720:	441a      	add	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3302      	adds	r3, #2
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	4413      	add	r3, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	3205      	adds	r2, #5
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	4413      	add	r3, r2
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <parseDelay>:
 *      Author: jzmz8
 */
#include <stdint.h>
#include <printf.h>

uint32_t parseDelay (uint8_t* delay) {
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
    uint8_t curr = delay [i];
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	74fb      	strb	r3, [r7, #19]
    uint32_t parsed_delay = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
    while (curr >> 7) { // More
 800175a:	e00e      	b.n	800177a <parseDelay+0x3a>
        parsed_delay += (curr & 0x7F) << 7;
 800175c:	7cfb      	ldrb	r3, [r7, #19]
 800175e:	01db      	lsls	r3, r3, #7
 8001760:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
        curr = delay [++i];
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	74fb      	strb	r3, [r7, #19]
    while (curr >> 7) { // More
 800177a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800177e:	2b00      	cmp	r3, #0
 8001780:	dbec      	blt.n	800175c <parseDelay+0x1c>
    }
    parsed_delay += curr & 0x7F;
 8001782:	7cfb      	ldrb	r3, [r7, #19]
 8001784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]

    return parsed_delay;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	371c      	adds	r7, #28
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <parseDelayMain>:

// Test values from homework #9
int parseDelayMain() {
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0
    uint8_t testDelay1[] = {0x3B, 0x80, 0x27, 0x00};
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <parseDelayMain+0x90>)
 80017a4:	61fb      	str	r3, [r7, #28]
    uint8_t testDelay2[] = {0x83, 0x18, 0x91, 0x54, 0x64};
 80017a6:	4a22      	ldr	r2, [pc, #136]	; (8001830 <parseDelayMain+0x94>)
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017b0:	6018      	str	r0, [r3, #0]
 80017b2:	3304      	adds	r3, #4
 80017b4:	7019      	strb	r1, [r3, #0]
    uint8_t testDelay3[] = {0xC5, 0x92, 0x74, 0xE3, 0x74, 0x12};
 80017b6:	4a1f      	ldr	r2, [pc, #124]	; (8001834 <parseDelayMain+0x98>)
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017c0:	6018      	str	r0, [r3, #0]
 80017c2:	3304      	adds	r3, #4
 80017c4:	8019      	strh	r1, [r3, #0]
    uint8_t testDelay4[] = {0x90, 0x82, 0x93, 0x64, 0xD3, 0x89};
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <parseDelayMain+0x9c>)
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ce:	6018      	str	r0, [r3, #0]
 80017d0:	3304      	adds	r3, #4
 80017d2:	8019      	strh	r1, [r3, #0]

    uint32_t result1 = parseDelay(testDelay1);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ffb1 	bl	8001740 <parseDelay>
 80017de:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint32_t result2 = parseDelay(testDelay2);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ffab 	bl	8001740 <parseDelay>
 80017ea:	62b8      	str	r0, [r7, #40]	; 0x28
    uint32_t result3 = parseDelay(testDelay3);
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ffa5 	bl	8001740 <parseDelay>
 80017f6:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t result4 = parseDelay(testDelay4);
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ffa0 	bl	8001740 <parseDelay>
 8001800:	6238      	str	r0, [r7, #32]

    // Print results for verification
    printf("Result 1: %lu\n", result1);
 8001802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <parseDelayMain+0xa0>)
 8001806:	f7ff fe67 	bl	80014d8 <printf>
    printf("Result 2: %lu\n", result2);
 800180a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <parseDelayMain+0xa4>)
 800180e:	f7ff fe63 	bl	80014d8 <printf>
    printf("Result 3: %lu\n", result3);
 8001812:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <parseDelayMain+0xa8>)
 8001816:	f7ff fe5f 	bl	80014d8 <printf>
    printf("Result 4: %lu\n", result4);
 800181a:	6a39      	ldr	r1, [r7, #32]
 800181c:	480a      	ldr	r0, [pc, #40]	; (8001848 <parseDelayMain+0xac>)
 800181e:	f7ff fe5b 	bl	80014d8 <printf>

    return 0;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3730      	adds	r7, #48	; 0x30
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	0027803b 	.word	0x0027803b
 8001830:	08002e08 	.word	0x08002e08
 8001834:	08002e10 	.word	0x08002e10
 8001838:	08002e18 	.word	0x08002e18
 800183c:	08002dc8 	.word	0x08002dc8
 8001840:	08002dd8 	.word	0x08002dd8
 8001844:	08002de8 	.word	0x08002de8
 8001848:	08002df8 	.word	0x08002df8

0800184c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800184c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001884 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001850:	f7ff fe94 	bl	800157c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <LoopForever+0x6>)
  ldr r1, =_edata
 8001856:	490d      	ldr	r1, [pc, #52]	; (800188c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001858:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <LoopForever+0xe>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800186c:	4c0a      	ldr	r4, [pc, #40]	; (8001898 <LoopForever+0x16>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187a:	f000 fd5f 	bl	800233c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800187e:	f7ff fc2d 	bl	80010dc <main>

08001882 <LoopForever>:

LoopForever:
    b LoopForever
 8001882:	e7fe      	b.n	8001882 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001884:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800188c:	20007d2c 	.word	0x20007d2c
  ldr r2, =_sidata
 8001890:	08002e5c 	.word	0x08002e5c
  ldr r2, =_sbss
 8001894:	20007d2c 	.word	0x20007d2c
  ldr r4, =_ebss
 8001898:	20007f64 	.word	0x20007f64

0800189c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800189c:	e7fe      	b.n	800189c <ADC1_2_IRQHandler>

0800189e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 f953 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f814 	bl	80018dc <HAL_InitTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	71fb      	strb	r3, [r7, #7]
 80018be:	e001      	b.n	80018c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c0:	f000 f805 	bl	80018ce <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c4:	79fb      	ldrb	r3, [r7, #7]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_InitTick+0x6c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d023      	beq.n	8001938 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_InitTick+0x70>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_InitTick+0x6c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f959 	bl	8001bbe <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10f      	bne.n	8001932 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b0f      	cmp	r3, #15
 8001916:	d809      	bhi.n	800192c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001918:	2200      	movs	r2, #0
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f000 f923 	bl	8001b6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001924:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_InitTick+0x74>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e007      	b.n	800193c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	e004      	b.n	800193c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	e001      	b.n	800193c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20007cd8 	.word	0x20007cd8
 800194c:	20007ccc 	.word	0x20007ccc
 8001950:	20007cd4 	.word	0x20007cd4

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20007e18 	.word	0x20007e18

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ffee 	bl	8001954 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_Delay+0x44>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001992:	bf00      	nop
 8001994:	f7ff ffde 	bl	8001954 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20007cd8 	.word	0x20007cd8

080019b4 <__NVIC_SetPriorityGrouping>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60d3      	str	r3, [r2, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_GetPriorityGrouping>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <__NVIC_GetPriorityGrouping+0x18>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	f003 0307 	and.w	r3, r3, #7
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_EnableIRQ>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db0b      	blt.n	8001a42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	f003 021f 	and.w	r2, r3, #31
 8001a30:	4907      	ldr	r1, [pc, #28]	; (8001a50 <__NVIC_EnableIRQ+0x38>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	2001      	movs	r0, #1
 8001a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b20:	d301      	bcc.n	8001b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <SysTick_Config+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2e:	210f      	movs	r1, #15
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f7ff ff8e 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <SysTick_Config+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <SysTick_Config+0x40>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff29 	bl	80019b4 <__NVIC_SetPriorityGrouping>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7c:	f7ff ff3e 	bl	80019fc <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff8e 	bl	8001aa8 <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5d 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff31 	bl	8001a18 <__NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffa2 	bl	8001b10 <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e014      	b.n	8001c12 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	791b      	ldrb	r3, [r3, #4]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d105      	bne.n	8001bfe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff f9dd 	bl	8000fb8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2202      	movs	r2, #2
 8001c02:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	795b      	ldrb	r3, [r3, #5]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_DAC_Start+0x16>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e03b      	b.n	8001ca8 <HAL_DAC_Start+0x8e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2201      	movs	r2, #1
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10f      	bne.n	8001c7a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d118      	bne.n	8001c9a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	e00f      	b.n	8001c9a <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c88:	d107      	bne.n	8001c9a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0202 	orr.w	r2, r2, #2
 8001c98:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3308      	adds	r3, #8
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	e004      	b.n	8001ce8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3314      	adds	r3, #20
 8001ce6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	461a      	mov	r2, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	371c      	adds	r7, #28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b088      	sub	sp, #32
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	795b      	ldrb	r3, [r3, #5]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_DAC_ConfigChannel+0x1c>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e107      	b.n	8001f2a <HAL_DAC_ConfigChannel+0x22c>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2202      	movs	r2, #2
 8001d24:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d174      	bne.n	8001e18 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001d2e:	f7ff fe11 	bl	8001954 <HAL_GetTick>
 8001d32:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d134      	bne.n	8001da4 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d3a:	e011      	b.n	8001d60 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001d3c:	f7ff fe0a 	bl	8001954 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d90a      	bls.n	8001d60 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f043 0208 	orr.w	r2, r3, #8
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2203      	movs	r2, #3
 8001d5a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e0e4      	b.n	8001f2a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1e6      	bne.n	8001d3c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f7ff fdfc 	bl	800196c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	6992      	ldr	r2, [r2, #24]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d7e:	e01e      	b.n	8001dbe <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001d80:	f7ff fde8 	bl	8001954 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d90a      	bls.n	8001da4 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f043 0208 	orr.w	r2, r3, #8
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0c2      	b.n	8001f2a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	dbe8      	blt.n	8001d80 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001dae:	2001      	movs	r0, #1
 8001db0:	f7ff fddc 	bl	800196c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	6992      	ldr	r2, [r2, #24]
 8001dbc:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	ea02 0103 	and.w	r1, r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	69da      	ldr	r2, [r3, #28]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	409a      	lsls	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	21ff      	movs	r1, #255	; 0xff
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	ea02 0103 	and.w	r1, r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	6a1a      	ldr	r2, [r3, #32]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d11d      	bne.n	8001e5c <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e26:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	221f      	movs	r2, #31
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	431a      	orrs	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6819      	ldr	r1, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6819      	ldr	r1, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	22c0      	movs	r2, #192	; 0xc0
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	400a      	ands	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3720      	adds	r7, #32
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f42:	e17f      	b.n	8002244 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8171 	beq.w	800223e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d005      	beq.n	8001f74 <HAL_GPIO_Init+0x40>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d130      	bne.n	8001fd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001faa:	2201      	movs	r2, #1
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	f003 0201 	and.w	r2, r3, #1
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d118      	bne.n	8002014 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	08db      	lsrs	r3, r3, #3
 8001ffe:	f003 0201 	and.w	r2, r3, #1
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b03      	cmp	r3, #3
 800201e:	d017      	beq.n	8002050 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	2203      	movs	r2, #3
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d123      	bne.n	80020a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	08da      	lsrs	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3208      	adds	r2, #8
 8002064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0203 	and.w	r2, r3, #3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80ac 	beq.w	800223e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	4b5f      	ldr	r3, [pc, #380]	; (8002264 <HAL_GPIO_Init+0x330>)
 80020e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ea:	4a5e      	ldr	r2, [pc, #376]	; (8002264 <HAL_GPIO_Init+0x330>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6613      	str	r3, [r2, #96]	; 0x60
 80020f2:	4b5c      	ldr	r3, [pc, #368]	; (8002264 <HAL_GPIO_Init+0x330>)
 80020f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020fe:	4a5a      	ldr	r2, [pc, #360]	; (8002268 <HAL_GPIO_Init+0x334>)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	3302      	adds	r3, #2
 8002106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	220f      	movs	r2, #15
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002128:	d025      	beq.n	8002176 <HAL_GPIO_Init+0x242>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4f      	ldr	r2, [pc, #316]	; (800226c <HAL_GPIO_Init+0x338>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01f      	beq.n	8002172 <HAL_GPIO_Init+0x23e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4e      	ldr	r2, [pc, #312]	; (8002270 <HAL_GPIO_Init+0x33c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d019      	beq.n	800216e <HAL_GPIO_Init+0x23a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4d      	ldr	r2, [pc, #308]	; (8002274 <HAL_GPIO_Init+0x340>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_GPIO_Init+0x236>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4c      	ldr	r2, [pc, #304]	; (8002278 <HAL_GPIO_Init+0x344>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00d      	beq.n	8002166 <HAL_GPIO_Init+0x232>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4b      	ldr	r2, [pc, #300]	; (800227c <HAL_GPIO_Init+0x348>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <HAL_GPIO_Init+0x22e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4a      	ldr	r2, [pc, #296]	; (8002280 <HAL_GPIO_Init+0x34c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d101      	bne.n	800215e <HAL_GPIO_Init+0x22a>
 800215a:	2306      	movs	r3, #6
 800215c:	e00c      	b.n	8002178 <HAL_GPIO_Init+0x244>
 800215e:	2307      	movs	r3, #7
 8002160:	e00a      	b.n	8002178 <HAL_GPIO_Init+0x244>
 8002162:	2305      	movs	r3, #5
 8002164:	e008      	b.n	8002178 <HAL_GPIO_Init+0x244>
 8002166:	2304      	movs	r3, #4
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x244>
 800216a:	2303      	movs	r3, #3
 800216c:	e004      	b.n	8002178 <HAL_GPIO_Init+0x244>
 800216e:	2302      	movs	r3, #2
 8002170:	e002      	b.n	8002178 <HAL_GPIO_Init+0x244>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_GPIO_Init+0x244>
 8002176:	2300      	movs	r3, #0
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	f002 0203 	and.w	r2, r2, #3
 800217e:	0092      	lsls	r2, r2, #2
 8002180:	4093      	lsls	r3, r2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002188:	4937      	ldr	r1, [pc, #220]	; (8002268 <HAL_GPIO_Init+0x334>)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002196:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <HAL_GPIO_Init+0x350>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43db      	mvns	r3, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021ba:	4a32      	ldr	r2, [pc, #200]	; (8002284 <HAL_GPIO_Init+0x350>)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021c0:	4b30      	ldr	r3, [pc, #192]	; (8002284 <HAL_GPIO_Init+0x350>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021e4:	4a27      	ldr	r2, [pc, #156]	; (8002284 <HAL_GPIO_Init+0x350>)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <HAL_GPIO_Init+0x350>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800220e:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <HAL_GPIO_Init+0x350>)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_GPIO_Init+0x350>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002238:	4a12      	ldr	r2, [pc, #72]	; (8002284 <HAL_GPIO_Init+0x350>)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa22 f303 	lsr.w	r3, r2, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	f47f ae78 	bne.w	8001f44 <HAL_GPIO_Init+0x10>
  }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	40010000 	.word	0x40010000
 800226c:	48000400 	.word	0x48000400
 8002270:	48000800 	.word	0x48000800
 8002274:	48000c00 	.word	0x48000c00
 8002278:	48001000 	.word	0x48001000
 800227c:	48001400 	.word	0x48001400
 8002280:	48001800 	.word	0x48001800
 8002284:	40010400 	.word	0x40010400

08002288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	887b      	ldrh	r3, [r7, #2]
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e001      	b.n	80022aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_vsiprintf_r>:
 80022b8:	b500      	push	{lr}
 80022ba:	b09b      	sub	sp, #108	; 0x6c
 80022bc:	9100      	str	r1, [sp, #0]
 80022be:	9104      	str	r1, [sp, #16]
 80022c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022c4:	9105      	str	r1, [sp, #20]
 80022c6:	9102      	str	r1, [sp, #8]
 80022c8:	4905      	ldr	r1, [pc, #20]	; (80022e0 <_vsiprintf_r+0x28>)
 80022ca:	9103      	str	r1, [sp, #12]
 80022cc:	4669      	mov	r1, sp
 80022ce:	f000 f9ad 	bl	800262c <_svfiprintf_r>
 80022d2:	9b00      	ldr	r3, [sp, #0]
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	b01b      	add	sp, #108	; 0x6c
 80022da:	f85d fb04 	ldr.w	pc, [sp], #4
 80022de:	bf00      	nop
 80022e0:	ffff0208 	.word	0xffff0208

080022e4 <vsiprintf>:
 80022e4:	4613      	mov	r3, r2
 80022e6:	460a      	mov	r2, r1
 80022e8:	4601      	mov	r1, r0
 80022ea:	4802      	ldr	r0, [pc, #8]	; (80022f4 <vsiprintf+0x10>)
 80022ec:	6800      	ldr	r0, [r0, #0]
 80022ee:	f7ff bfe3 	b.w	80022b8 <_vsiprintf_r>
 80022f2:	bf00      	nop
 80022f4:	20007d28 	.word	0x20007d28

080022f8 <memset>:
 80022f8:	4402      	add	r2, r0
 80022fa:	4603      	mov	r3, r0
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d100      	bne.n	8002302 <memset+0xa>
 8002300:	4770      	bx	lr
 8002302:	f803 1b01 	strb.w	r1, [r3], #1
 8002306:	e7f9      	b.n	80022fc <memset+0x4>

08002308 <strncpy>:
 8002308:	b510      	push	{r4, lr}
 800230a:	3901      	subs	r1, #1
 800230c:	4603      	mov	r3, r0
 800230e:	b132      	cbz	r2, 800231e <strncpy+0x16>
 8002310:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002314:	f803 4b01 	strb.w	r4, [r3], #1
 8002318:	3a01      	subs	r2, #1
 800231a:	2c00      	cmp	r4, #0
 800231c:	d1f7      	bne.n	800230e <strncpy+0x6>
 800231e:	441a      	add	r2, r3
 8002320:	2100      	movs	r1, #0
 8002322:	4293      	cmp	r3, r2
 8002324:	d100      	bne.n	8002328 <strncpy+0x20>
 8002326:	bd10      	pop	{r4, pc}
 8002328:	f803 1b01 	strb.w	r1, [r3], #1
 800232c:	e7f9      	b.n	8002322 <strncpy+0x1a>
	...

08002330 <__errno>:
 8002330:	4b01      	ldr	r3, [pc, #4]	; (8002338 <__errno+0x8>)
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20007d28 	.word	0x20007d28

0800233c <__libc_init_array>:
 800233c:	b570      	push	{r4, r5, r6, lr}
 800233e:	4d0d      	ldr	r5, [pc, #52]	; (8002374 <__libc_init_array+0x38>)
 8002340:	4c0d      	ldr	r4, [pc, #52]	; (8002378 <__libc_init_array+0x3c>)
 8002342:	1b64      	subs	r4, r4, r5
 8002344:	10a4      	asrs	r4, r4, #2
 8002346:	2600      	movs	r6, #0
 8002348:	42a6      	cmp	r6, r4
 800234a:	d109      	bne.n	8002360 <__libc_init_array+0x24>
 800234c:	4d0b      	ldr	r5, [pc, #44]	; (800237c <__libc_init_array+0x40>)
 800234e:	4c0c      	ldr	r4, [pc, #48]	; (8002380 <__libc_init_array+0x44>)
 8002350:	f000 fc6a 	bl	8002c28 <_init>
 8002354:	1b64      	subs	r4, r4, r5
 8002356:	10a4      	asrs	r4, r4, #2
 8002358:	2600      	movs	r6, #0
 800235a:	42a6      	cmp	r6, r4
 800235c:	d105      	bne.n	800236a <__libc_init_array+0x2e>
 800235e:	bd70      	pop	{r4, r5, r6, pc}
 8002360:	f855 3b04 	ldr.w	r3, [r5], #4
 8002364:	4798      	blx	r3
 8002366:	3601      	adds	r6, #1
 8002368:	e7ee      	b.n	8002348 <__libc_init_array+0xc>
 800236a:	f855 3b04 	ldr.w	r3, [r5], #4
 800236e:	4798      	blx	r3
 8002370:	3601      	adds	r6, #1
 8002372:	e7f2      	b.n	800235a <__libc_init_array+0x1e>
 8002374:	08002e54 	.word	0x08002e54
 8002378:	08002e54 	.word	0x08002e54
 800237c:	08002e54 	.word	0x08002e54
 8002380:	08002e58 	.word	0x08002e58

08002384 <__retarget_lock_acquire_recursive>:
 8002384:	4770      	bx	lr

08002386 <__retarget_lock_release_recursive>:
 8002386:	4770      	bx	lr

08002388 <_free_r>:
 8002388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800238a:	2900      	cmp	r1, #0
 800238c:	d044      	beq.n	8002418 <_free_r+0x90>
 800238e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002392:	9001      	str	r0, [sp, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	f1a1 0404 	sub.w	r4, r1, #4
 800239a:	bfb8      	it	lt
 800239c:	18e4      	addlt	r4, r4, r3
 800239e:	f000 f8df 	bl	8002560 <__malloc_lock>
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <_free_r+0x94>)
 80023a4:	9801      	ldr	r0, [sp, #4]
 80023a6:	6813      	ldr	r3, [r2, #0]
 80023a8:	b933      	cbnz	r3, 80023b8 <_free_r+0x30>
 80023aa:	6063      	str	r3, [r4, #4]
 80023ac:	6014      	str	r4, [r2, #0]
 80023ae:	b003      	add	sp, #12
 80023b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80023b4:	f000 b8da 	b.w	800256c <__malloc_unlock>
 80023b8:	42a3      	cmp	r3, r4
 80023ba:	d908      	bls.n	80023ce <_free_r+0x46>
 80023bc:	6825      	ldr	r5, [r4, #0]
 80023be:	1961      	adds	r1, r4, r5
 80023c0:	428b      	cmp	r3, r1
 80023c2:	bf01      	itttt	eq
 80023c4:	6819      	ldreq	r1, [r3, #0]
 80023c6:	685b      	ldreq	r3, [r3, #4]
 80023c8:	1949      	addeq	r1, r1, r5
 80023ca:	6021      	streq	r1, [r4, #0]
 80023cc:	e7ed      	b.n	80023aa <_free_r+0x22>
 80023ce:	461a      	mov	r2, r3
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	b10b      	cbz	r3, 80023d8 <_free_r+0x50>
 80023d4:	42a3      	cmp	r3, r4
 80023d6:	d9fa      	bls.n	80023ce <_free_r+0x46>
 80023d8:	6811      	ldr	r1, [r2, #0]
 80023da:	1855      	adds	r5, r2, r1
 80023dc:	42a5      	cmp	r5, r4
 80023de:	d10b      	bne.n	80023f8 <_free_r+0x70>
 80023e0:	6824      	ldr	r4, [r4, #0]
 80023e2:	4421      	add	r1, r4
 80023e4:	1854      	adds	r4, r2, r1
 80023e6:	42a3      	cmp	r3, r4
 80023e8:	6011      	str	r1, [r2, #0]
 80023ea:	d1e0      	bne.n	80023ae <_free_r+0x26>
 80023ec:	681c      	ldr	r4, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	6053      	str	r3, [r2, #4]
 80023f2:	440c      	add	r4, r1
 80023f4:	6014      	str	r4, [r2, #0]
 80023f6:	e7da      	b.n	80023ae <_free_r+0x26>
 80023f8:	d902      	bls.n	8002400 <_free_r+0x78>
 80023fa:	230c      	movs	r3, #12
 80023fc:	6003      	str	r3, [r0, #0]
 80023fe:	e7d6      	b.n	80023ae <_free_r+0x26>
 8002400:	6825      	ldr	r5, [r4, #0]
 8002402:	1961      	adds	r1, r4, r5
 8002404:	428b      	cmp	r3, r1
 8002406:	bf04      	itt	eq
 8002408:	6819      	ldreq	r1, [r3, #0]
 800240a:	685b      	ldreq	r3, [r3, #4]
 800240c:	6063      	str	r3, [r4, #4]
 800240e:	bf04      	itt	eq
 8002410:	1949      	addeq	r1, r1, r5
 8002412:	6021      	streq	r1, [r4, #0]
 8002414:	6054      	str	r4, [r2, #4]
 8002416:	e7ca      	b.n	80023ae <_free_r+0x26>
 8002418:	b003      	add	sp, #12
 800241a:	bd30      	pop	{r4, r5, pc}
 800241c:	20007f5c 	.word	0x20007f5c

08002420 <sbrk_aligned>:
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	4e0e      	ldr	r6, [pc, #56]	; (800245c <sbrk_aligned+0x3c>)
 8002424:	460c      	mov	r4, r1
 8002426:	6831      	ldr	r1, [r6, #0]
 8002428:	4605      	mov	r5, r0
 800242a:	b911      	cbnz	r1, 8002432 <sbrk_aligned+0x12>
 800242c:	f000 fba6 	bl	8002b7c <_sbrk_r>
 8002430:	6030      	str	r0, [r6, #0]
 8002432:	4621      	mov	r1, r4
 8002434:	4628      	mov	r0, r5
 8002436:	f000 fba1 	bl	8002b7c <_sbrk_r>
 800243a:	1c43      	adds	r3, r0, #1
 800243c:	d00a      	beq.n	8002454 <sbrk_aligned+0x34>
 800243e:	1cc4      	adds	r4, r0, #3
 8002440:	f024 0403 	bic.w	r4, r4, #3
 8002444:	42a0      	cmp	r0, r4
 8002446:	d007      	beq.n	8002458 <sbrk_aligned+0x38>
 8002448:	1a21      	subs	r1, r4, r0
 800244a:	4628      	mov	r0, r5
 800244c:	f000 fb96 	bl	8002b7c <_sbrk_r>
 8002450:	3001      	adds	r0, #1
 8002452:	d101      	bne.n	8002458 <sbrk_aligned+0x38>
 8002454:	f04f 34ff 	mov.w	r4, #4294967295
 8002458:	4620      	mov	r0, r4
 800245a:	bd70      	pop	{r4, r5, r6, pc}
 800245c:	20007f60 	.word	0x20007f60

08002460 <_malloc_r>:
 8002460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002464:	1ccd      	adds	r5, r1, #3
 8002466:	f025 0503 	bic.w	r5, r5, #3
 800246a:	3508      	adds	r5, #8
 800246c:	2d0c      	cmp	r5, #12
 800246e:	bf38      	it	cc
 8002470:	250c      	movcc	r5, #12
 8002472:	2d00      	cmp	r5, #0
 8002474:	4607      	mov	r7, r0
 8002476:	db01      	blt.n	800247c <_malloc_r+0x1c>
 8002478:	42a9      	cmp	r1, r5
 800247a:	d905      	bls.n	8002488 <_malloc_r+0x28>
 800247c:	230c      	movs	r3, #12
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	2600      	movs	r6, #0
 8002482:	4630      	mov	r0, r6
 8002484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002488:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800255c <_malloc_r+0xfc>
 800248c:	f000 f868 	bl	8002560 <__malloc_lock>
 8002490:	f8d8 3000 	ldr.w	r3, [r8]
 8002494:	461c      	mov	r4, r3
 8002496:	bb5c      	cbnz	r4, 80024f0 <_malloc_r+0x90>
 8002498:	4629      	mov	r1, r5
 800249a:	4638      	mov	r0, r7
 800249c:	f7ff ffc0 	bl	8002420 <sbrk_aligned>
 80024a0:	1c43      	adds	r3, r0, #1
 80024a2:	4604      	mov	r4, r0
 80024a4:	d155      	bne.n	8002552 <_malloc_r+0xf2>
 80024a6:	f8d8 4000 	ldr.w	r4, [r8]
 80024aa:	4626      	mov	r6, r4
 80024ac:	2e00      	cmp	r6, #0
 80024ae:	d145      	bne.n	800253c <_malloc_r+0xdc>
 80024b0:	2c00      	cmp	r4, #0
 80024b2:	d048      	beq.n	8002546 <_malloc_r+0xe6>
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	4631      	mov	r1, r6
 80024b8:	4638      	mov	r0, r7
 80024ba:	eb04 0903 	add.w	r9, r4, r3
 80024be:	f000 fb5d 	bl	8002b7c <_sbrk_r>
 80024c2:	4581      	cmp	r9, r0
 80024c4:	d13f      	bne.n	8002546 <_malloc_r+0xe6>
 80024c6:	6821      	ldr	r1, [r4, #0]
 80024c8:	1a6d      	subs	r5, r5, r1
 80024ca:	4629      	mov	r1, r5
 80024cc:	4638      	mov	r0, r7
 80024ce:	f7ff ffa7 	bl	8002420 <sbrk_aligned>
 80024d2:	3001      	adds	r0, #1
 80024d4:	d037      	beq.n	8002546 <_malloc_r+0xe6>
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	442b      	add	r3, r5
 80024da:	6023      	str	r3, [r4, #0]
 80024dc:	f8d8 3000 	ldr.w	r3, [r8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d038      	beq.n	8002556 <_malloc_r+0xf6>
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	42a2      	cmp	r2, r4
 80024e8:	d12b      	bne.n	8002542 <_malloc_r+0xe2>
 80024ea:	2200      	movs	r2, #0
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	e00f      	b.n	8002510 <_malloc_r+0xb0>
 80024f0:	6822      	ldr	r2, [r4, #0]
 80024f2:	1b52      	subs	r2, r2, r5
 80024f4:	d41f      	bmi.n	8002536 <_malloc_r+0xd6>
 80024f6:	2a0b      	cmp	r2, #11
 80024f8:	d917      	bls.n	800252a <_malloc_r+0xca>
 80024fa:	1961      	adds	r1, r4, r5
 80024fc:	42a3      	cmp	r3, r4
 80024fe:	6025      	str	r5, [r4, #0]
 8002500:	bf18      	it	ne
 8002502:	6059      	strne	r1, [r3, #4]
 8002504:	6863      	ldr	r3, [r4, #4]
 8002506:	bf08      	it	eq
 8002508:	f8c8 1000 	streq.w	r1, [r8]
 800250c:	5162      	str	r2, [r4, r5]
 800250e:	604b      	str	r3, [r1, #4]
 8002510:	4638      	mov	r0, r7
 8002512:	f104 060b 	add.w	r6, r4, #11
 8002516:	f000 f829 	bl	800256c <__malloc_unlock>
 800251a:	f026 0607 	bic.w	r6, r6, #7
 800251e:	1d23      	adds	r3, r4, #4
 8002520:	1af2      	subs	r2, r6, r3
 8002522:	d0ae      	beq.n	8002482 <_malloc_r+0x22>
 8002524:	1b9b      	subs	r3, r3, r6
 8002526:	50a3      	str	r3, [r4, r2]
 8002528:	e7ab      	b.n	8002482 <_malloc_r+0x22>
 800252a:	42a3      	cmp	r3, r4
 800252c:	6862      	ldr	r2, [r4, #4]
 800252e:	d1dd      	bne.n	80024ec <_malloc_r+0x8c>
 8002530:	f8c8 2000 	str.w	r2, [r8]
 8002534:	e7ec      	b.n	8002510 <_malloc_r+0xb0>
 8002536:	4623      	mov	r3, r4
 8002538:	6864      	ldr	r4, [r4, #4]
 800253a:	e7ac      	b.n	8002496 <_malloc_r+0x36>
 800253c:	4634      	mov	r4, r6
 800253e:	6876      	ldr	r6, [r6, #4]
 8002540:	e7b4      	b.n	80024ac <_malloc_r+0x4c>
 8002542:	4613      	mov	r3, r2
 8002544:	e7cc      	b.n	80024e0 <_malloc_r+0x80>
 8002546:	230c      	movs	r3, #12
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4638      	mov	r0, r7
 800254c:	f000 f80e 	bl	800256c <__malloc_unlock>
 8002550:	e797      	b.n	8002482 <_malloc_r+0x22>
 8002552:	6025      	str	r5, [r4, #0]
 8002554:	e7dc      	b.n	8002510 <_malloc_r+0xb0>
 8002556:	605b      	str	r3, [r3, #4]
 8002558:	deff      	udf	#255	; 0xff
 800255a:	bf00      	nop
 800255c:	20007f5c 	.word	0x20007f5c

08002560 <__malloc_lock>:
 8002560:	4801      	ldr	r0, [pc, #4]	; (8002568 <__malloc_lock+0x8>)
 8002562:	f7ff bf0f 	b.w	8002384 <__retarget_lock_acquire_recursive>
 8002566:	bf00      	nop
 8002568:	20007f58 	.word	0x20007f58

0800256c <__malloc_unlock>:
 800256c:	4801      	ldr	r0, [pc, #4]	; (8002574 <__malloc_unlock+0x8>)
 800256e:	f7ff bf0a 	b.w	8002386 <__retarget_lock_release_recursive>
 8002572:	bf00      	nop
 8002574:	20007f58 	.word	0x20007f58

08002578 <__ssputs_r>:
 8002578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800257c:	688e      	ldr	r6, [r1, #8]
 800257e:	461f      	mov	r7, r3
 8002580:	42be      	cmp	r6, r7
 8002582:	680b      	ldr	r3, [r1, #0]
 8002584:	4682      	mov	sl, r0
 8002586:	460c      	mov	r4, r1
 8002588:	4690      	mov	r8, r2
 800258a:	d82c      	bhi.n	80025e6 <__ssputs_r+0x6e>
 800258c:	898a      	ldrh	r2, [r1, #12]
 800258e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002592:	d026      	beq.n	80025e2 <__ssputs_r+0x6a>
 8002594:	6965      	ldr	r5, [r4, #20]
 8002596:	6909      	ldr	r1, [r1, #16]
 8002598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800259c:	eba3 0901 	sub.w	r9, r3, r1
 80025a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80025a4:	1c7b      	adds	r3, r7, #1
 80025a6:	444b      	add	r3, r9
 80025a8:	106d      	asrs	r5, r5, #1
 80025aa:	429d      	cmp	r5, r3
 80025ac:	bf38      	it	cc
 80025ae:	461d      	movcc	r5, r3
 80025b0:	0553      	lsls	r3, r2, #21
 80025b2:	d527      	bpl.n	8002604 <__ssputs_r+0x8c>
 80025b4:	4629      	mov	r1, r5
 80025b6:	f7ff ff53 	bl	8002460 <_malloc_r>
 80025ba:	4606      	mov	r6, r0
 80025bc:	b360      	cbz	r0, 8002618 <__ssputs_r+0xa0>
 80025be:	6921      	ldr	r1, [r4, #16]
 80025c0:	464a      	mov	r2, r9
 80025c2:	f000 faeb 	bl	8002b9c <memcpy>
 80025c6:	89a3      	ldrh	r3, [r4, #12]
 80025c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80025cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d0:	81a3      	strh	r3, [r4, #12]
 80025d2:	6126      	str	r6, [r4, #16]
 80025d4:	6165      	str	r5, [r4, #20]
 80025d6:	444e      	add	r6, r9
 80025d8:	eba5 0509 	sub.w	r5, r5, r9
 80025dc:	6026      	str	r6, [r4, #0]
 80025de:	60a5      	str	r5, [r4, #8]
 80025e0:	463e      	mov	r6, r7
 80025e2:	42be      	cmp	r6, r7
 80025e4:	d900      	bls.n	80025e8 <__ssputs_r+0x70>
 80025e6:	463e      	mov	r6, r7
 80025e8:	6820      	ldr	r0, [r4, #0]
 80025ea:	4632      	mov	r2, r6
 80025ec:	4641      	mov	r1, r8
 80025ee:	f000 faab 	bl	8002b48 <memmove>
 80025f2:	68a3      	ldr	r3, [r4, #8]
 80025f4:	1b9b      	subs	r3, r3, r6
 80025f6:	60a3      	str	r3, [r4, #8]
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	4433      	add	r3, r6
 80025fc:	6023      	str	r3, [r4, #0]
 80025fe:	2000      	movs	r0, #0
 8002600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002604:	462a      	mov	r2, r5
 8002606:	f000 fad7 	bl	8002bb8 <_realloc_r>
 800260a:	4606      	mov	r6, r0
 800260c:	2800      	cmp	r0, #0
 800260e:	d1e0      	bne.n	80025d2 <__ssputs_r+0x5a>
 8002610:	6921      	ldr	r1, [r4, #16]
 8002612:	4650      	mov	r0, sl
 8002614:	f7ff feb8 	bl	8002388 <_free_r>
 8002618:	230c      	movs	r3, #12
 800261a:	f8ca 3000 	str.w	r3, [sl]
 800261e:	89a3      	ldrh	r3, [r4, #12]
 8002620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002624:	81a3      	strh	r3, [r4, #12]
 8002626:	f04f 30ff 	mov.w	r0, #4294967295
 800262a:	e7e9      	b.n	8002600 <__ssputs_r+0x88>

0800262c <_svfiprintf_r>:
 800262c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002630:	4698      	mov	r8, r3
 8002632:	898b      	ldrh	r3, [r1, #12]
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	b09d      	sub	sp, #116	; 0x74
 8002638:	4607      	mov	r7, r0
 800263a:	460d      	mov	r5, r1
 800263c:	4614      	mov	r4, r2
 800263e:	d50e      	bpl.n	800265e <_svfiprintf_r+0x32>
 8002640:	690b      	ldr	r3, [r1, #16]
 8002642:	b963      	cbnz	r3, 800265e <_svfiprintf_r+0x32>
 8002644:	2140      	movs	r1, #64	; 0x40
 8002646:	f7ff ff0b 	bl	8002460 <_malloc_r>
 800264a:	6028      	str	r0, [r5, #0]
 800264c:	6128      	str	r0, [r5, #16]
 800264e:	b920      	cbnz	r0, 800265a <_svfiprintf_r+0x2e>
 8002650:	230c      	movs	r3, #12
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	e0d0      	b.n	80027fc <_svfiprintf_r+0x1d0>
 800265a:	2340      	movs	r3, #64	; 0x40
 800265c:	616b      	str	r3, [r5, #20]
 800265e:	2300      	movs	r3, #0
 8002660:	9309      	str	r3, [sp, #36]	; 0x24
 8002662:	2320      	movs	r3, #32
 8002664:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002668:	f8cd 800c 	str.w	r8, [sp, #12]
 800266c:	2330      	movs	r3, #48	; 0x30
 800266e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002814 <_svfiprintf_r+0x1e8>
 8002672:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002676:	f04f 0901 	mov.w	r9, #1
 800267a:	4623      	mov	r3, r4
 800267c:	469a      	mov	sl, r3
 800267e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002682:	b10a      	cbz	r2, 8002688 <_svfiprintf_r+0x5c>
 8002684:	2a25      	cmp	r2, #37	; 0x25
 8002686:	d1f9      	bne.n	800267c <_svfiprintf_r+0x50>
 8002688:	ebba 0b04 	subs.w	fp, sl, r4
 800268c:	d00b      	beq.n	80026a6 <_svfiprintf_r+0x7a>
 800268e:	465b      	mov	r3, fp
 8002690:	4622      	mov	r2, r4
 8002692:	4629      	mov	r1, r5
 8002694:	4638      	mov	r0, r7
 8002696:	f7ff ff6f 	bl	8002578 <__ssputs_r>
 800269a:	3001      	adds	r0, #1
 800269c:	f000 80a9 	beq.w	80027f2 <_svfiprintf_r+0x1c6>
 80026a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026a2:	445a      	add	r2, fp
 80026a4:	9209      	str	r2, [sp, #36]	; 0x24
 80026a6:	f89a 3000 	ldrb.w	r3, [sl]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80a1 	beq.w	80027f2 <_svfiprintf_r+0x1c6>
 80026b0:	2300      	movs	r3, #0
 80026b2:	f04f 32ff 	mov.w	r2, #4294967295
 80026b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026ba:	f10a 0a01 	add.w	sl, sl, #1
 80026be:	9304      	str	r3, [sp, #16]
 80026c0:	9307      	str	r3, [sp, #28]
 80026c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026c6:	931a      	str	r3, [sp, #104]	; 0x68
 80026c8:	4654      	mov	r4, sl
 80026ca:	2205      	movs	r2, #5
 80026cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026d0:	4850      	ldr	r0, [pc, #320]	; (8002814 <_svfiprintf_r+0x1e8>)
 80026d2:	f7fd fd95 	bl	8000200 <memchr>
 80026d6:	9a04      	ldr	r2, [sp, #16]
 80026d8:	b9d8      	cbnz	r0, 8002712 <_svfiprintf_r+0xe6>
 80026da:	06d0      	lsls	r0, r2, #27
 80026dc:	bf44      	itt	mi
 80026de:	2320      	movmi	r3, #32
 80026e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026e4:	0711      	lsls	r1, r2, #28
 80026e6:	bf44      	itt	mi
 80026e8:	232b      	movmi	r3, #43	; 0x2b
 80026ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026ee:	f89a 3000 	ldrb.w	r3, [sl]
 80026f2:	2b2a      	cmp	r3, #42	; 0x2a
 80026f4:	d015      	beq.n	8002722 <_svfiprintf_r+0xf6>
 80026f6:	9a07      	ldr	r2, [sp, #28]
 80026f8:	4654      	mov	r4, sl
 80026fa:	2000      	movs	r0, #0
 80026fc:	f04f 0c0a 	mov.w	ip, #10
 8002700:	4621      	mov	r1, r4
 8002702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002706:	3b30      	subs	r3, #48	; 0x30
 8002708:	2b09      	cmp	r3, #9
 800270a:	d94d      	bls.n	80027a8 <_svfiprintf_r+0x17c>
 800270c:	b1b0      	cbz	r0, 800273c <_svfiprintf_r+0x110>
 800270e:	9207      	str	r2, [sp, #28]
 8002710:	e014      	b.n	800273c <_svfiprintf_r+0x110>
 8002712:	eba0 0308 	sub.w	r3, r0, r8
 8002716:	fa09 f303 	lsl.w	r3, r9, r3
 800271a:	4313      	orrs	r3, r2
 800271c:	9304      	str	r3, [sp, #16]
 800271e:	46a2      	mov	sl, r4
 8002720:	e7d2      	b.n	80026c8 <_svfiprintf_r+0x9c>
 8002722:	9b03      	ldr	r3, [sp, #12]
 8002724:	1d19      	adds	r1, r3, #4
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	9103      	str	r1, [sp, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	bfbb      	ittet	lt
 800272e:	425b      	neglt	r3, r3
 8002730:	f042 0202 	orrlt.w	r2, r2, #2
 8002734:	9307      	strge	r3, [sp, #28]
 8002736:	9307      	strlt	r3, [sp, #28]
 8002738:	bfb8      	it	lt
 800273a:	9204      	strlt	r2, [sp, #16]
 800273c:	7823      	ldrb	r3, [r4, #0]
 800273e:	2b2e      	cmp	r3, #46	; 0x2e
 8002740:	d10c      	bne.n	800275c <_svfiprintf_r+0x130>
 8002742:	7863      	ldrb	r3, [r4, #1]
 8002744:	2b2a      	cmp	r3, #42	; 0x2a
 8002746:	d134      	bne.n	80027b2 <_svfiprintf_r+0x186>
 8002748:	9b03      	ldr	r3, [sp, #12]
 800274a:	1d1a      	adds	r2, r3, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	9203      	str	r2, [sp, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	bfb8      	it	lt
 8002754:	f04f 33ff 	movlt.w	r3, #4294967295
 8002758:	3402      	adds	r4, #2
 800275a:	9305      	str	r3, [sp, #20]
 800275c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002824 <_svfiprintf_r+0x1f8>
 8002760:	7821      	ldrb	r1, [r4, #0]
 8002762:	2203      	movs	r2, #3
 8002764:	4650      	mov	r0, sl
 8002766:	f7fd fd4b 	bl	8000200 <memchr>
 800276a:	b138      	cbz	r0, 800277c <_svfiprintf_r+0x150>
 800276c:	9b04      	ldr	r3, [sp, #16]
 800276e:	eba0 000a 	sub.w	r0, r0, sl
 8002772:	2240      	movs	r2, #64	; 0x40
 8002774:	4082      	lsls	r2, r0
 8002776:	4313      	orrs	r3, r2
 8002778:	3401      	adds	r4, #1
 800277a:	9304      	str	r3, [sp, #16]
 800277c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002780:	4825      	ldr	r0, [pc, #148]	; (8002818 <_svfiprintf_r+0x1ec>)
 8002782:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002786:	2206      	movs	r2, #6
 8002788:	f7fd fd3a 	bl	8000200 <memchr>
 800278c:	2800      	cmp	r0, #0
 800278e:	d038      	beq.n	8002802 <_svfiprintf_r+0x1d6>
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <_svfiprintf_r+0x1f0>)
 8002792:	bb1b      	cbnz	r3, 80027dc <_svfiprintf_r+0x1b0>
 8002794:	9b03      	ldr	r3, [sp, #12]
 8002796:	3307      	adds	r3, #7
 8002798:	f023 0307 	bic.w	r3, r3, #7
 800279c:	3308      	adds	r3, #8
 800279e:	9303      	str	r3, [sp, #12]
 80027a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027a2:	4433      	add	r3, r6
 80027a4:	9309      	str	r3, [sp, #36]	; 0x24
 80027a6:	e768      	b.n	800267a <_svfiprintf_r+0x4e>
 80027a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80027ac:	460c      	mov	r4, r1
 80027ae:	2001      	movs	r0, #1
 80027b0:	e7a6      	b.n	8002700 <_svfiprintf_r+0xd4>
 80027b2:	2300      	movs	r3, #0
 80027b4:	3401      	adds	r4, #1
 80027b6:	9305      	str	r3, [sp, #20]
 80027b8:	4619      	mov	r1, r3
 80027ba:	f04f 0c0a 	mov.w	ip, #10
 80027be:	4620      	mov	r0, r4
 80027c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027c4:	3a30      	subs	r2, #48	; 0x30
 80027c6:	2a09      	cmp	r2, #9
 80027c8:	d903      	bls.n	80027d2 <_svfiprintf_r+0x1a6>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0c6      	beq.n	800275c <_svfiprintf_r+0x130>
 80027ce:	9105      	str	r1, [sp, #20]
 80027d0:	e7c4      	b.n	800275c <_svfiprintf_r+0x130>
 80027d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80027d6:	4604      	mov	r4, r0
 80027d8:	2301      	movs	r3, #1
 80027da:	e7f0      	b.n	80027be <_svfiprintf_r+0x192>
 80027dc:	ab03      	add	r3, sp, #12
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	462a      	mov	r2, r5
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <_svfiprintf_r+0x1f4>)
 80027e4:	a904      	add	r1, sp, #16
 80027e6:	4638      	mov	r0, r7
 80027e8:	f3af 8000 	nop.w
 80027ec:	1c42      	adds	r2, r0, #1
 80027ee:	4606      	mov	r6, r0
 80027f0:	d1d6      	bne.n	80027a0 <_svfiprintf_r+0x174>
 80027f2:	89ab      	ldrh	r3, [r5, #12]
 80027f4:	065b      	lsls	r3, r3, #25
 80027f6:	f53f af2d 	bmi.w	8002654 <_svfiprintf_r+0x28>
 80027fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027fc:	b01d      	add	sp, #116	; 0x74
 80027fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002802:	ab03      	add	r3, sp, #12
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	462a      	mov	r2, r5
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <_svfiprintf_r+0x1f4>)
 800280a:	a904      	add	r1, sp, #16
 800280c:	4638      	mov	r0, r7
 800280e:	f000 f879 	bl	8002904 <_printf_i>
 8002812:	e7eb      	b.n	80027ec <_svfiprintf_r+0x1c0>
 8002814:	08002e1e 	.word	0x08002e1e
 8002818:	08002e28 	.word	0x08002e28
 800281c:	00000000 	.word	0x00000000
 8002820:	08002579 	.word	0x08002579
 8002824:	08002e24 	.word	0x08002e24

08002828 <_printf_common>:
 8002828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800282c:	4616      	mov	r6, r2
 800282e:	4699      	mov	r9, r3
 8002830:	688a      	ldr	r2, [r1, #8]
 8002832:	690b      	ldr	r3, [r1, #16]
 8002834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002838:	4293      	cmp	r3, r2
 800283a:	bfb8      	it	lt
 800283c:	4613      	movlt	r3, r2
 800283e:	6033      	str	r3, [r6, #0]
 8002840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002844:	4607      	mov	r7, r0
 8002846:	460c      	mov	r4, r1
 8002848:	b10a      	cbz	r2, 800284e <_printf_common+0x26>
 800284a:	3301      	adds	r3, #1
 800284c:	6033      	str	r3, [r6, #0]
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	0699      	lsls	r1, r3, #26
 8002852:	bf42      	ittt	mi
 8002854:	6833      	ldrmi	r3, [r6, #0]
 8002856:	3302      	addmi	r3, #2
 8002858:	6033      	strmi	r3, [r6, #0]
 800285a:	6825      	ldr	r5, [r4, #0]
 800285c:	f015 0506 	ands.w	r5, r5, #6
 8002860:	d106      	bne.n	8002870 <_printf_common+0x48>
 8002862:	f104 0a19 	add.w	sl, r4, #25
 8002866:	68e3      	ldr	r3, [r4, #12]
 8002868:	6832      	ldr	r2, [r6, #0]
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	42ab      	cmp	r3, r5
 800286e:	dc26      	bgt.n	80028be <_printf_common+0x96>
 8002870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002874:	1e13      	subs	r3, r2, #0
 8002876:	6822      	ldr	r2, [r4, #0]
 8002878:	bf18      	it	ne
 800287a:	2301      	movne	r3, #1
 800287c:	0692      	lsls	r2, r2, #26
 800287e:	d42b      	bmi.n	80028d8 <_printf_common+0xb0>
 8002880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002884:	4649      	mov	r1, r9
 8002886:	4638      	mov	r0, r7
 8002888:	47c0      	blx	r8
 800288a:	3001      	adds	r0, #1
 800288c:	d01e      	beq.n	80028cc <_printf_common+0xa4>
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	6922      	ldr	r2, [r4, #16]
 8002892:	f003 0306 	and.w	r3, r3, #6
 8002896:	2b04      	cmp	r3, #4
 8002898:	bf02      	ittt	eq
 800289a:	68e5      	ldreq	r5, [r4, #12]
 800289c:	6833      	ldreq	r3, [r6, #0]
 800289e:	1aed      	subeq	r5, r5, r3
 80028a0:	68a3      	ldr	r3, [r4, #8]
 80028a2:	bf0c      	ite	eq
 80028a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028a8:	2500      	movne	r5, #0
 80028aa:	4293      	cmp	r3, r2
 80028ac:	bfc4      	itt	gt
 80028ae:	1a9b      	subgt	r3, r3, r2
 80028b0:	18ed      	addgt	r5, r5, r3
 80028b2:	2600      	movs	r6, #0
 80028b4:	341a      	adds	r4, #26
 80028b6:	42b5      	cmp	r5, r6
 80028b8:	d11a      	bne.n	80028f0 <_printf_common+0xc8>
 80028ba:	2000      	movs	r0, #0
 80028bc:	e008      	b.n	80028d0 <_printf_common+0xa8>
 80028be:	2301      	movs	r3, #1
 80028c0:	4652      	mov	r2, sl
 80028c2:	4649      	mov	r1, r9
 80028c4:	4638      	mov	r0, r7
 80028c6:	47c0      	blx	r8
 80028c8:	3001      	adds	r0, #1
 80028ca:	d103      	bne.n	80028d4 <_printf_common+0xac>
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028d4:	3501      	adds	r5, #1
 80028d6:	e7c6      	b.n	8002866 <_printf_common+0x3e>
 80028d8:	18e1      	adds	r1, r4, r3
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	2030      	movs	r0, #48	; 0x30
 80028de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028e2:	4422      	add	r2, r4
 80028e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028ec:	3302      	adds	r3, #2
 80028ee:	e7c7      	b.n	8002880 <_printf_common+0x58>
 80028f0:	2301      	movs	r3, #1
 80028f2:	4622      	mov	r2, r4
 80028f4:	4649      	mov	r1, r9
 80028f6:	4638      	mov	r0, r7
 80028f8:	47c0      	blx	r8
 80028fa:	3001      	adds	r0, #1
 80028fc:	d0e6      	beq.n	80028cc <_printf_common+0xa4>
 80028fe:	3601      	adds	r6, #1
 8002900:	e7d9      	b.n	80028b6 <_printf_common+0x8e>
	...

08002904 <_printf_i>:
 8002904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002908:	7e0f      	ldrb	r7, [r1, #24]
 800290a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800290c:	2f78      	cmp	r7, #120	; 0x78
 800290e:	4691      	mov	r9, r2
 8002910:	4680      	mov	r8, r0
 8002912:	460c      	mov	r4, r1
 8002914:	469a      	mov	sl, r3
 8002916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800291a:	d807      	bhi.n	800292c <_printf_i+0x28>
 800291c:	2f62      	cmp	r7, #98	; 0x62
 800291e:	d80a      	bhi.n	8002936 <_printf_i+0x32>
 8002920:	2f00      	cmp	r7, #0
 8002922:	f000 80d4 	beq.w	8002ace <_printf_i+0x1ca>
 8002926:	2f58      	cmp	r7, #88	; 0x58
 8002928:	f000 80c0 	beq.w	8002aac <_printf_i+0x1a8>
 800292c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002934:	e03a      	b.n	80029ac <_printf_i+0xa8>
 8002936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800293a:	2b15      	cmp	r3, #21
 800293c:	d8f6      	bhi.n	800292c <_printf_i+0x28>
 800293e:	a101      	add	r1, pc, #4	; (adr r1, 8002944 <_printf_i+0x40>)
 8002940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002944:	0800299d 	.word	0x0800299d
 8002948:	080029b1 	.word	0x080029b1
 800294c:	0800292d 	.word	0x0800292d
 8002950:	0800292d 	.word	0x0800292d
 8002954:	0800292d 	.word	0x0800292d
 8002958:	0800292d 	.word	0x0800292d
 800295c:	080029b1 	.word	0x080029b1
 8002960:	0800292d 	.word	0x0800292d
 8002964:	0800292d 	.word	0x0800292d
 8002968:	0800292d 	.word	0x0800292d
 800296c:	0800292d 	.word	0x0800292d
 8002970:	08002ab5 	.word	0x08002ab5
 8002974:	080029dd 	.word	0x080029dd
 8002978:	08002a6f 	.word	0x08002a6f
 800297c:	0800292d 	.word	0x0800292d
 8002980:	0800292d 	.word	0x0800292d
 8002984:	08002ad7 	.word	0x08002ad7
 8002988:	0800292d 	.word	0x0800292d
 800298c:	080029dd 	.word	0x080029dd
 8002990:	0800292d 	.word	0x0800292d
 8002994:	0800292d 	.word	0x0800292d
 8002998:	08002a77 	.word	0x08002a77
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	1d1a      	adds	r2, r3, #4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	602a      	str	r2, [r5, #0]
 80029a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029ac:	2301      	movs	r3, #1
 80029ae:	e09f      	b.n	8002af0 <_printf_i+0x1ec>
 80029b0:	6820      	ldr	r0, [r4, #0]
 80029b2:	682b      	ldr	r3, [r5, #0]
 80029b4:	0607      	lsls	r7, r0, #24
 80029b6:	f103 0104 	add.w	r1, r3, #4
 80029ba:	6029      	str	r1, [r5, #0]
 80029bc:	d501      	bpl.n	80029c2 <_printf_i+0xbe>
 80029be:	681e      	ldr	r6, [r3, #0]
 80029c0:	e003      	b.n	80029ca <_printf_i+0xc6>
 80029c2:	0646      	lsls	r6, r0, #25
 80029c4:	d5fb      	bpl.n	80029be <_printf_i+0xba>
 80029c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80029ca:	2e00      	cmp	r6, #0
 80029cc:	da03      	bge.n	80029d6 <_printf_i+0xd2>
 80029ce:	232d      	movs	r3, #45	; 0x2d
 80029d0:	4276      	negs	r6, r6
 80029d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029d6:	485a      	ldr	r0, [pc, #360]	; (8002b40 <_printf_i+0x23c>)
 80029d8:	230a      	movs	r3, #10
 80029da:	e012      	b.n	8002a02 <_printf_i+0xfe>
 80029dc:	682b      	ldr	r3, [r5, #0]
 80029de:	6820      	ldr	r0, [r4, #0]
 80029e0:	1d19      	adds	r1, r3, #4
 80029e2:	6029      	str	r1, [r5, #0]
 80029e4:	0605      	lsls	r5, r0, #24
 80029e6:	d501      	bpl.n	80029ec <_printf_i+0xe8>
 80029e8:	681e      	ldr	r6, [r3, #0]
 80029ea:	e002      	b.n	80029f2 <_printf_i+0xee>
 80029ec:	0641      	lsls	r1, r0, #25
 80029ee:	d5fb      	bpl.n	80029e8 <_printf_i+0xe4>
 80029f0:	881e      	ldrh	r6, [r3, #0]
 80029f2:	4853      	ldr	r0, [pc, #332]	; (8002b40 <_printf_i+0x23c>)
 80029f4:	2f6f      	cmp	r7, #111	; 0x6f
 80029f6:	bf0c      	ite	eq
 80029f8:	2308      	moveq	r3, #8
 80029fa:	230a      	movne	r3, #10
 80029fc:	2100      	movs	r1, #0
 80029fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a02:	6865      	ldr	r5, [r4, #4]
 8002a04:	60a5      	str	r5, [r4, #8]
 8002a06:	2d00      	cmp	r5, #0
 8002a08:	bfa2      	ittt	ge
 8002a0a:	6821      	ldrge	r1, [r4, #0]
 8002a0c:	f021 0104 	bicge.w	r1, r1, #4
 8002a10:	6021      	strge	r1, [r4, #0]
 8002a12:	b90e      	cbnz	r6, 8002a18 <_printf_i+0x114>
 8002a14:	2d00      	cmp	r5, #0
 8002a16:	d04b      	beq.n	8002ab0 <_printf_i+0x1ac>
 8002a18:	4615      	mov	r5, r2
 8002a1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a1e:	fb03 6711 	mls	r7, r3, r1, r6
 8002a22:	5dc7      	ldrb	r7, [r0, r7]
 8002a24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a28:	4637      	mov	r7, r6
 8002a2a:	42bb      	cmp	r3, r7
 8002a2c:	460e      	mov	r6, r1
 8002a2e:	d9f4      	bls.n	8002a1a <_printf_i+0x116>
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d10b      	bne.n	8002a4c <_printf_i+0x148>
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	07de      	lsls	r6, r3, #31
 8002a38:	d508      	bpl.n	8002a4c <_printf_i+0x148>
 8002a3a:	6923      	ldr	r3, [r4, #16]
 8002a3c:	6861      	ldr	r1, [r4, #4]
 8002a3e:	4299      	cmp	r1, r3
 8002a40:	bfde      	ittt	le
 8002a42:	2330      	movle	r3, #48	; 0x30
 8002a44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a4c:	1b52      	subs	r2, r2, r5
 8002a4e:	6122      	str	r2, [r4, #16]
 8002a50:	f8cd a000 	str.w	sl, [sp]
 8002a54:	464b      	mov	r3, r9
 8002a56:	aa03      	add	r2, sp, #12
 8002a58:	4621      	mov	r1, r4
 8002a5a:	4640      	mov	r0, r8
 8002a5c:	f7ff fee4 	bl	8002828 <_printf_common>
 8002a60:	3001      	adds	r0, #1
 8002a62:	d14a      	bne.n	8002afa <_printf_i+0x1f6>
 8002a64:	f04f 30ff 	mov.w	r0, #4294967295
 8002a68:	b004      	add	sp, #16
 8002a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	f043 0320 	orr.w	r3, r3, #32
 8002a74:	6023      	str	r3, [r4, #0]
 8002a76:	4833      	ldr	r0, [pc, #204]	; (8002b44 <_printf_i+0x240>)
 8002a78:	2778      	movs	r7, #120	; 0x78
 8002a7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	6829      	ldr	r1, [r5, #0]
 8002a82:	061f      	lsls	r7, r3, #24
 8002a84:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a88:	d402      	bmi.n	8002a90 <_printf_i+0x18c>
 8002a8a:	065f      	lsls	r7, r3, #25
 8002a8c:	bf48      	it	mi
 8002a8e:	b2b6      	uxthmi	r6, r6
 8002a90:	07df      	lsls	r7, r3, #31
 8002a92:	bf48      	it	mi
 8002a94:	f043 0320 	orrmi.w	r3, r3, #32
 8002a98:	6029      	str	r1, [r5, #0]
 8002a9a:	bf48      	it	mi
 8002a9c:	6023      	strmi	r3, [r4, #0]
 8002a9e:	b91e      	cbnz	r6, 8002aa8 <_printf_i+0x1a4>
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	f023 0320 	bic.w	r3, r3, #32
 8002aa6:	6023      	str	r3, [r4, #0]
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	e7a7      	b.n	80029fc <_printf_i+0xf8>
 8002aac:	4824      	ldr	r0, [pc, #144]	; (8002b40 <_printf_i+0x23c>)
 8002aae:	e7e4      	b.n	8002a7a <_printf_i+0x176>
 8002ab0:	4615      	mov	r5, r2
 8002ab2:	e7bd      	b.n	8002a30 <_printf_i+0x12c>
 8002ab4:	682b      	ldr	r3, [r5, #0]
 8002ab6:	6826      	ldr	r6, [r4, #0]
 8002ab8:	6961      	ldr	r1, [r4, #20]
 8002aba:	1d18      	adds	r0, r3, #4
 8002abc:	6028      	str	r0, [r5, #0]
 8002abe:	0635      	lsls	r5, r6, #24
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	d501      	bpl.n	8002ac8 <_printf_i+0x1c4>
 8002ac4:	6019      	str	r1, [r3, #0]
 8002ac6:	e002      	b.n	8002ace <_printf_i+0x1ca>
 8002ac8:	0670      	lsls	r0, r6, #25
 8002aca:	d5fb      	bpl.n	8002ac4 <_printf_i+0x1c0>
 8002acc:	8019      	strh	r1, [r3, #0]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	6123      	str	r3, [r4, #16]
 8002ad2:	4615      	mov	r5, r2
 8002ad4:	e7bc      	b.n	8002a50 <_printf_i+0x14c>
 8002ad6:	682b      	ldr	r3, [r5, #0]
 8002ad8:	1d1a      	adds	r2, r3, #4
 8002ada:	602a      	str	r2, [r5, #0]
 8002adc:	681d      	ldr	r5, [r3, #0]
 8002ade:	6862      	ldr	r2, [r4, #4]
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f7fd fb8c 	bl	8000200 <memchr>
 8002ae8:	b108      	cbz	r0, 8002aee <_printf_i+0x1ea>
 8002aea:	1b40      	subs	r0, r0, r5
 8002aec:	6060      	str	r0, [r4, #4]
 8002aee:	6863      	ldr	r3, [r4, #4]
 8002af0:	6123      	str	r3, [r4, #16]
 8002af2:	2300      	movs	r3, #0
 8002af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002af8:	e7aa      	b.n	8002a50 <_printf_i+0x14c>
 8002afa:	6923      	ldr	r3, [r4, #16]
 8002afc:	462a      	mov	r2, r5
 8002afe:	4649      	mov	r1, r9
 8002b00:	4640      	mov	r0, r8
 8002b02:	47d0      	blx	sl
 8002b04:	3001      	adds	r0, #1
 8002b06:	d0ad      	beq.n	8002a64 <_printf_i+0x160>
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	079b      	lsls	r3, r3, #30
 8002b0c:	d413      	bmi.n	8002b36 <_printf_i+0x232>
 8002b0e:	68e0      	ldr	r0, [r4, #12]
 8002b10:	9b03      	ldr	r3, [sp, #12]
 8002b12:	4298      	cmp	r0, r3
 8002b14:	bfb8      	it	lt
 8002b16:	4618      	movlt	r0, r3
 8002b18:	e7a6      	b.n	8002a68 <_printf_i+0x164>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	4632      	mov	r2, r6
 8002b1e:	4649      	mov	r1, r9
 8002b20:	4640      	mov	r0, r8
 8002b22:	47d0      	blx	sl
 8002b24:	3001      	adds	r0, #1
 8002b26:	d09d      	beq.n	8002a64 <_printf_i+0x160>
 8002b28:	3501      	adds	r5, #1
 8002b2a:	68e3      	ldr	r3, [r4, #12]
 8002b2c:	9903      	ldr	r1, [sp, #12]
 8002b2e:	1a5b      	subs	r3, r3, r1
 8002b30:	42ab      	cmp	r3, r5
 8002b32:	dcf2      	bgt.n	8002b1a <_printf_i+0x216>
 8002b34:	e7eb      	b.n	8002b0e <_printf_i+0x20a>
 8002b36:	2500      	movs	r5, #0
 8002b38:	f104 0619 	add.w	r6, r4, #25
 8002b3c:	e7f5      	b.n	8002b2a <_printf_i+0x226>
 8002b3e:	bf00      	nop
 8002b40:	08002e2f 	.word	0x08002e2f
 8002b44:	08002e40 	.word	0x08002e40

08002b48 <memmove>:
 8002b48:	4288      	cmp	r0, r1
 8002b4a:	b510      	push	{r4, lr}
 8002b4c:	eb01 0402 	add.w	r4, r1, r2
 8002b50:	d902      	bls.n	8002b58 <memmove+0x10>
 8002b52:	4284      	cmp	r4, r0
 8002b54:	4623      	mov	r3, r4
 8002b56:	d807      	bhi.n	8002b68 <memmove+0x20>
 8002b58:	1e43      	subs	r3, r0, #1
 8002b5a:	42a1      	cmp	r1, r4
 8002b5c:	d008      	beq.n	8002b70 <memmove+0x28>
 8002b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b66:	e7f8      	b.n	8002b5a <memmove+0x12>
 8002b68:	4402      	add	r2, r0
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	428a      	cmp	r2, r1
 8002b6e:	d100      	bne.n	8002b72 <memmove+0x2a>
 8002b70:	bd10      	pop	{r4, pc}
 8002b72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b7a:	e7f7      	b.n	8002b6c <memmove+0x24>

08002b7c <_sbrk_r>:
 8002b7c:	b538      	push	{r3, r4, r5, lr}
 8002b7e:	4d06      	ldr	r5, [pc, #24]	; (8002b98 <_sbrk_r+0x1c>)
 8002b80:	2300      	movs	r3, #0
 8002b82:	4604      	mov	r4, r0
 8002b84:	4608      	mov	r0, r1
 8002b86:	602b      	str	r3, [r5, #0]
 8002b88:	f7fe fcc2 	bl	8001510 <_sbrk>
 8002b8c:	1c43      	adds	r3, r0, #1
 8002b8e:	d102      	bne.n	8002b96 <_sbrk_r+0x1a>
 8002b90:	682b      	ldr	r3, [r5, #0]
 8002b92:	b103      	cbz	r3, 8002b96 <_sbrk_r+0x1a>
 8002b94:	6023      	str	r3, [r4, #0]
 8002b96:	bd38      	pop	{r3, r4, r5, pc}
 8002b98:	20007f54 	.word	0x20007f54

08002b9c <memcpy>:
 8002b9c:	440a      	add	r2, r1
 8002b9e:	4291      	cmp	r1, r2
 8002ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ba4:	d100      	bne.n	8002ba8 <memcpy+0xc>
 8002ba6:	4770      	bx	lr
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bb2:	4291      	cmp	r1, r2
 8002bb4:	d1f9      	bne.n	8002baa <memcpy+0xe>
 8002bb6:	bd10      	pop	{r4, pc}

08002bb8 <_realloc_r>:
 8002bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bbc:	4680      	mov	r8, r0
 8002bbe:	4614      	mov	r4, r2
 8002bc0:	460e      	mov	r6, r1
 8002bc2:	b921      	cbnz	r1, 8002bce <_realloc_r+0x16>
 8002bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc8:	4611      	mov	r1, r2
 8002bca:	f7ff bc49 	b.w	8002460 <_malloc_r>
 8002bce:	b92a      	cbnz	r2, 8002bdc <_realloc_r+0x24>
 8002bd0:	f7ff fbda 	bl	8002388 <_free_r>
 8002bd4:	4625      	mov	r5, r4
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bdc:	f000 f81b 	bl	8002c16 <_malloc_usable_size_r>
 8002be0:	4284      	cmp	r4, r0
 8002be2:	4607      	mov	r7, r0
 8002be4:	d802      	bhi.n	8002bec <_realloc_r+0x34>
 8002be6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002bea:	d812      	bhi.n	8002c12 <_realloc_r+0x5a>
 8002bec:	4621      	mov	r1, r4
 8002bee:	4640      	mov	r0, r8
 8002bf0:	f7ff fc36 	bl	8002460 <_malloc_r>
 8002bf4:	4605      	mov	r5, r0
 8002bf6:	2800      	cmp	r0, #0
 8002bf8:	d0ed      	beq.n	8002bd6 <_realloc_r+0x1e>
 8002bfa:	42bc      	cmp	r4, r7
 8002bfc:	4622      	mov	r2, r4
 8002bfe:	4631      	mov	r1, r6
 8002c00:	bf28      	it	cs
 8002c02:	463a      	movcs	r2, r7
 8002c04:	f7ff ffca 	bl	8002b9c <memcpy>
 8002c08:	4631      	mov	r1, r6
 8002c0a:	4640      	mov	r0, r8
 8002c0c:	f7ff fbbc 	bl	8002388 <_free_r>
 8002c10:	e7e1      	b.n	8002bd6 <_realloc_r+0x1e>
 8002c12:	4635      	mov	r5, r6
 8002c14:	e7df      	b.n	8002bd6 <_realloc_r+0x1e>

08002c16 <_malloc_usable_size_r>:
 8002c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c1a:	1f18      	subs	r0, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bfbc      	itt	lt
 8002c20:	580b      	ldrlt	r3, [r1, r0]
 8002c22:	18c0      	addlt	r0, r0, r3
 8002c24:	4770      	bx	lr
	...

08002c28 <_init>:
 8002c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2a:	bf00      	nop
 8002c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2e:	bc08      	pop	{r3}
 8002c30:	469e      	mov	lr, r3
 8002c32:	4770      	bx	lr

08002c34 <_fini>:
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c36:	bf00      	nop
 8002c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3a:	bc08      	pop	{r3}
 8002c3c:	469e      	mov	lr, r3
 8002c3e:	4770      	bx	lr
